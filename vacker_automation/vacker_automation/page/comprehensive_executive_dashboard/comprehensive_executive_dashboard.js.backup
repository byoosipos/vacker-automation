frappe.pages['comprehensive-executive-dashboard'].on_page_load = function(wrapper) {
    var page = frappe.ui.make_app_page({
        parent: wrapper,
        title: 'AI Business Intelligence Dashboard',
        single_column: true
    });

    // Load required libraries and AI enhancements
    const aiEnhancementScript = '/assets/vacker_automation/js/ai_dashboard_enhancements.js';
    
    if (typeof Chart === 'undefined') {
        // Need to load both Chart.js and AI enhancements
        frappe.require([
            'https://cdn.jsdelivr.net/npm/chart.js@3.9.1/dist/chart.min.js',
            aiEnhancementScript
        ], function() {
            // Initialize dashboard with AI enhancements
            frappe.comprehensive_dashboard = new ComprehensiveExecutiveDashboard(page);
        });
    } else {
        // Chart.js already loaded, just load AI enhancements
        frappe.require([aiEnhancementScript], function() {
            // Initialize dashboard with AI enhancements
            frappe.comprehensive_dashboard = new ComprehensiveExecutiveDashboard(page);
        });
    }
};

class ComprehensiveExecutiveDashboard {
    constructor(page) {
        this.page = page;
        this.filters = {};
        this.data = {};
        this.charts = {};
        this.current_view = 'ai_assistant';
        this.current_session = null;
        this.chat_sessions = [];
        this.is_mobile = window.innerWidth <= 768;
        this.modules = {}; // Store loaded module instances
        this.loaded_modules = new Set(); // Track which modules have been loaded
        this.loading_modules = new Set(); // Track modules currently being loaded
        this.cache = new Map(); // Client-side cache for module data
        this.cache_timeout = 300000; // 5 minutes in milliseconds
        
        // User Experience enhancements
        this.user_preferences = {};
        this.user_role = null;
        this.accessible_modules = new Set();
        this.is_first_time_user = false;
        this.tour_active = false;
        this.layout_mode = 'default'; // default, compact, expanded
        this.theme_mode = 'light'; // light, dark, auto
        
        this.load_user_preferences();
        this.check_user_permissions();
        this.make_page();
        this.setup_filters();
        this.setup_mobile_handlers();
        this.load_chat_sessions();
        
        // Initialize based on user preferences
        this.initialize_dashboard();
    }
    
    /**
     * Load user preferences and settings
     */
    async load_user_preferences() {
        try {
            const response = await frappe.call({
                method: 'vacker_automation.vacker_automation.page.comprehensive_executive_dashboard.comprehensive_executive_dashboard.get_user_preferences',
                no_spinner: true
            });
            
            if (response.message) {
                this.user_preferences = response.message.preferences || {};
                this.user_role = response.message.role || 'Guest';
                this.is_first_time_user = response.message.is_first_time || false;
                
                // Apply saved preferences
                this.layout_mode = this.user_preferences.layout_mode || 'default';
                this.theme_mode = this.user_preferences.theme_mode || 'light';
                this.current_view = this.user_preferences.default_view || 'ai_assistant';
                
                this.apply_theme();
                this.apply_layout_mode();
            }
        } catch (error) {
            console.error('Error loading user preferences:', error);
        }
    }
    
    /**
     * Check user permissions and accessible modules
     */
    async check_user_permissions() {
        try {
            const response = await frappe.call({
                method: 'vacker_automation.vacker_automation.page.comprehensive_executive_dashboard.comprehensive_executive_dashboard.get_user_permissions',
                no_spinner: true
            });
            
            if (response.message) {
                this.accessible_modules = new Set(response.message.accessible_modules || []);
                this.user_role = response.message.role || 'Guest';
            }
        } catch (error) {
            console.error('Error checking user permissions:', error);
            // Default to basic access
            this.accessible_modules = new Set(['ai_assistant', 'overview']);
        }
    }
    
    /**
     * Initialize dashboard based on user state
     */
    async initialize_dashboard() {
        if (this.is_first_time_user) {
            this.show_onboarding();
        } else {
            this.load_data();
        }
    }
    
    /**
     * Show onboarding tour for new users
     */
    show_onboarding() {
        this.tour_active = true;
        
        const onboarding_content = `
            <div class="onboarding-overlay">
                <div class="onboarding-modal">
                    <div class="onboarding-header">
                        <h2><i class="fa fa-rocket"></i> Welcome to AI Business Intelligence!</h2>
                        <p>Let's take a quick tour to help you get started</p>
                    </div>
                    <div class="onboarding-content">
                        <div class="onboarding-step active" data-step="1">
                            <div class="step-icon"><i class="fa fa-dashboard"></i></div>
                            <h3>Dashboard Overview</h3>
                            <p>Your AI-powered business intelligence dashboard provides comprehensive insights across all business functions.</p>
                            <ul>
                                <li>Real-time financial analytics</li>
                                <li>Project performance tracking</li>
                                <li>HR and operational insights</li>
                                <li>AI-powered chat assistant</li>
                            </ul>
                        </div>
                        
                        <div class="onboarding-step" data-step="2">
                            <div class="step-icon"><i class="fa fa-comments"></i></div>
                            <h3>AI Assistant</h3>
                            <p>Your intelligent business companion can help you:</p>
                            <ul>
                                <li>Analyze your business data</li>
                                <li>Generate reports and insights</li>
                                <li>Answer questions about performance</li>
                                <li>Provide recommendations</li>
                            </ul>
                        </div>
                        
                        <div class="onboarding-step" data-step="3">
                            <div class="step-icon"><i class="fa fa-cogs"></i></div>
                            <h3>Customization</h3>
                            <p>Personalize your experience:</p>
                            <ul>
                                <li>Choose your preferred layout</li>
                                <li>Set default dashboard view</li>
                                <li>Configure data refresh intervals</li>
                                <li>Access role-based modules</li>
                            </ul>
                        </div>
                        
                        <div class="onboarding-step" data-step="4">
                            <div class="step-icon"><i class="fa fa-shield"></i></div>
                            <h3>Your Access Level</h3>
                            <p>Based on your role: <strong>${this.user_role}</strong></p>
                            <p>You have access to:</p>
                            <ul>
                                ${Array.from(this.accessible_modules).map(module => 
                                    `<li>${this.get_module_display_name(module)}</li>`
                                ).join('')}
                            </ul>
                        </div>
                    </div>
                    <div class="onboarding-footer">
                        <div class="step-indicators">
                            <span class="step-indicator active" data-step="1"></span>
                            <span class="step-indicator" data-step="2"></span>
                            <span class="step-indicator" data-step="3"></span>
                            <span class="step-indicator" data-step="4"></span>
                        </div>
                        <div class="onboarding-actions">
                            <button class="btn btn-default" id="skip-tour">Skip Tour</button>
                            <button class="btn btn-primary" id="next-step">Next</button>
                            <button class="btn btn-success" id="finish-tour" style="display: none;">Get Started</button>
                        </div>
                    </div>
                </div>
            </div>
        `;
        
        $('body').append(onboarding_content);
        this.setup_onboarding_events();
    }
    
    /**
     * Setup onboarding event handlers
     */
    setup_onboarding_events() {
        let current_step = 1;
        const total_steps = 4;
        
        $('#next-step').on('click', () => {
            if (current_step < total_steps) {
                current_step++;
                this.show_onboarding_step(current_step);
                
                if (current_step === total_steps) {
                    $('#next-step').hide();
                    $('#finish-tour').show();
                }
            }
        });
        
        $('#skip-tour, #finish-tour').on('click', () => {
            this.finish_onboarding();
        });
        
        $('.step-indicator').on('click', (e) => {
            const step = parseInt($(e.target).data('step'));
            current_step = step;
            this.show_onboarding_step(step);
        });
    }
    
    /**
     * Show specific onboarding step
     */
    show_onboarding_step(step) {
        $('.onboarding-step').removeClass('active');
        $(`.onboarding-step[data-step="${step}"]`).addClass('active');
        
        $('.step-indicator').removeClass('active');
        $(`.step-indicator[data-step="${step}"]`).addClass('active');
    }
    
    /**
     * Finish onboarding and start using dashboard
     */
    async finish_onboarding() {
        this.tour_active = false;
        $('.onboarding-overlay').remove();
        
        // Save that user has completed onboarding
        try {
            await frappe.call({
                method: 'vacker_automation.vacker_automation.page.comprehensive_executive_dashboard.comprehensive_executive_dashboard.complete_onboarding',
                no_spinner: true
            });
        } catch (error) {
            console.error('Error saving onboarding completion:', error);
        }
        
        // Show welcome message and start dashboard
        frappe.show_alert({
            message: 'Welcome! Your dashboard is loading...',
            indicator: 'green'
        }, 3);
        
        this.load_data();
    }
    
    /**
     * Apply theme based on user preference
     */
    apply_theme() {
        const body = $('body');
        body.removeClass('theme-light theme-dark');
        
        if (this.theme_mode === 'auto') {
            const prefersDark = window.matchMedia('(prefers-color-scheme: dark)').matches;
            body.addClass(prefersDark ? 'theme-dark' : 'theme-light');
        } else {
            body.addClass(`theme-${this.theme_mode}`);
        }
    }
    
    /**
     * Apply layout mode
     */
    apply_layout_mode() {
        const dashboard = $('.chatgpt-dashboard');
        dashboard.removeClass('layout-default layout-compact layout-expanded');
        dashboard.addClass(`layout-${this.layout_mode}`);
    }
    
    /**
     * Save user preferences
     */
    async save_user_preferences() {
        try {
            await frappe.call({
                method: 'vacker_automation.vacker_automation.page.comprehensive_executive_dashboard.comprehensive_executive_dashboard.save_user_preferences',
                args: {
                    preferences: {
                        layout_mode: this.layout_mode,
                        theme_mode: this.theme_mode,
                        default_view: this.current_view,
                        ...this.user_preferences
                    }
                },
                no_spinner: true
            });
        } catch (error) {
            console.error('Error saving user preferences:', error);
        }
    }
    
    /**
     * Show user preferences modal
     */
    show_preferences_modal() {
        const modal_content = `
            <div class="modal fade" id="preferences-modal" tabindex="-1">
                <div class="modal-dialog modal-lg">
                    <div class="modal-content">
                        <div class="modal-header">
                            <h4 class="modal-title"><i class="fa fa-cogs"></i> Dashboard Preferences</h4>
                            <button type="button" class="close" data-dismiss="modal">
                                <span>&times;</span>
                            </button>
                        </div>
                        <div class="modal-body">
                            <div class="preferences-tabs">
                                <ul class="nav nav-tabs">
                                    <li class="active"><a href="#appearance-tab" data-toggle="tab">Appearance</a></li>
                                    <li><a href="#layout-tab" data-toggle="tab">Layout</a></li>
                                    <li><a href="#modules-tab" data-toggle="tab">Modules</a></li>
                                    <li><a href="#notifications-tab" data-toggle="tab">Notifications</a></li>
                                </ul>
                                <div class="tab-content">
                                    <div class="tab-pane active" id="appearance-tab">
                                        ${this.render_appearance_preferences()}
                                    </div>
                                    <div class="tab-pane" id="layout-tab">
                                        ${this.render_layout_preferences()}
                                    </div>
                                    <div class="tab-pane" id="modules-tab">
                                        ${this.render_modules_preferences()}
                                    </div>
                                    <div class="tab-pane" id="notifications-tab">
                                        ${this.render_notifications_preferences()}
                                    </div>
                                </div>
                            </div>
                        </div>
                        <div class="modal-footer">
                            <button type="button" class="btn btn-default" data-dismiss="modal">Cancel</button>
                            <button type="button" class="btn btn-primary" id="save-preferences">Save Changes</button>
                        </div>
                    </div>
                </div>
            </div>
        `;
        
        $('body').append(modal_content);
        $('#preferences-modal').modal('show');
        this.setup_preferences_events();
    }
    
    /**
     * Render appearance preferences
     */
    render_appearance_preferences() {
        return `
            <div class="preference-section">
                <h5><i class="fa fa-paint-brush"></i> Theme</h5>
                <div class="theme-options">
                    <label class="theme-option ${this.theme_mode === 'light' ? 'active' : ''}">
                        <input type="radio" name="theme" value="light" ${this.theme_mode === 'light' ? 'checked' : ''}>
                        <div class="theme-preview light">
                            <div class="theme-header"></div>
                            <div class="theme-sidebar"></div>
                            <div class="theme-content"></div>
                        </div>
                        <span>Light</span>
                    </label>
                    <label class="theme-option ${this.theme_mode === 'dark' ? 'active' : ''}">
                        <input type="radio" name="theme" value="dark" ${this.theme_mode === 'dark' ? 'checked' : ''}>
                        <div class="theme-preview dark">
                            <div class="theme-header"></div>
                            <div class="theme-sidebar"></div>
                            <div class="theme-content"></div>
                        </div>
                        <span>Dark</span>
                    </label>
                    <label class="theme-option ${this.theme_mode === 'auto' ? 'active' : ''}">
                        <input type="radio" name="theme" value="auto" ${this.theme_mode === 'auto' ? 'checked' : ''}>
                        <div class="theme-preview auto">
                            <div class="theme-header"></div>
                            <div class="theme-sidebar"></div>
                            <div class="theme-content"></div>
                        </div>
                        <span>Auto</span>
                    </label>
                </div>
            </div>
            
            <div class="preference-section">
                <h5><i class="fa fa-home"></i> Default View</h5>
                <select class="form-control" id="default-view">
                    ${Array.from(this.accessible_modules).map(module => 
                        `<option value="${module}" ${this.current_view === module ? 'selected' : ''}>
                            ${this.get_module_display_name(module)}
                        </option>`
                    ).join('')}
                </select>
            </div>
        `;
    }
    
    /**
     * Render layout preferences
     */
    render_layout_preferences() {
        return `
            <div class="preference-section">
                <h5><i class="fa fa-layout"></i> Layout Mode</h5>
                <div class="layout-options">
                    <label class="layout-option ${this.layout_mode === 'default' ? 'active' : ''}">
                        <input type="radio" name="layout" value="default" ${this.layout_mode === 'default' ? 'checked' : ''}>
                        <div class="layout-preview default">
                            <div class="layout-sidebar"></div>
                            <div class="layout-content"></div>
                            <div class="layout-chat"></div>
                        </div>
                        <span>Default</span>
                    </label>
                    <label class="layout-option ${this.layout_mode === 'compact' ? 'active' : ''}">
                        <input type="radio" name="layout" value="compact" ${this.layout_mode === 'compact' ? 'checked' : ''}>
                        <div class="layout-preview compact">
                            <div class="layout-sidebar"></div>
                            <div class="layout-content"></div>
                        </div>
                        <span>Compact</span>
                    </label>
                    <label class="layout-option ${this.layout_mode === 'expanded' ? 'active' : ''}">
                        <input type="radio" name="layout" value="expanded" ${this.layout_mode === 'expanded' ? 'checked' : ''}>
                        <div class="layout-preview expanded">
                            <div class="layout-content"></div>
                        </div>
                        <span>Expanded</span>
                    </label>
                </div>
            </div>
            
            <div class="preference-section">
                <h5><i class="fa fa-refresh"></i> Data Refresh</h5>
                <div class="form-group">
                    <label>Auto-refresh interval (minutes)</label>
                    <select class="form-control" id="refresh-interval">
                        <option value="0">Manual only</option>
                        <option value="5" ${this.user_preferences.refresh_interval === 5 ? 'selected' : ''}>5 minutes</option>
                        <option value="10" ${this.user_preferences.refresh_interval === 10 ? 'selected' : ''}>10 minutes</option>
                        <option value="15" ${this.user_preferences.refresh_interval === 15 ? 'selected' : ''}>15 minutes</option>
                        <option value="30" ${this.user_preferences.refresh_interval === 30 ? 'selected' : ''}>30 minutes</option>
                    </select>
                </div>
            </div>
        `;
    }
    
    /**
     * Check if user has access to a module
     */
    has_module_access(module_name) {
        return this.accessible_modules.has(module_name);
    }
    
    /**
     * Filter modules menu based on user permissions
     */


    make_page() {
        // Hide default page elements
        this.page.$title_area.hide();
        this.page.$sub_title_area.hide();
        this.hide_frappe_elements();
        
        this.page.main.html(`
            <div class="chatgpt-dashboard">
                <!-- Mobile Header -->
                <div class="mobile-header">
                    <button class="mobile-menu-btn" id="mobile-menu-toggle">
                        <i class="fa fa-bars"></i>
                    </button>
                    <div class="mobile-title">
                        <i class="fa fa-robot"></i>
                        <span>AI Dashboard</span>
                    </div>
                    <button class="mobile-chat-btn" id="mobile-chat-toggle">
                        <i class="fa fa-comments"></i>
                    </button>
                </div>

                <!-- Desktop Header -->
                <div class="desktop-header">
                    <div class="header-left">
                        <button class="sidebar-toggle" id="modules-sidebar-toggle">
                            <i class="fa fa-th-large"></i>
                            <span>Modules</span>
                        </button>
                        <div class="dashboard-filters"></div>
                    </div>
                    <div class="header-center">
                        <h1><i class="fa fa-robot"></i> AI Business Intelligence</h1>
                    </div>
                    <div class="header-right">
                        <button class="control-btn" onclick="frappe.set_route('/')">
                            <i class="fa fa-home"></i>
                            <span>Desk</span>
                        </button>
                        <button class="control-btn" onclick="frappe.app.logout()">
                            <i class="fa fa-sign-out"></i>
                            <span>Logout</span>
                        </button>
                        <button class="chat-history-toggle" id="chat-history-toggle">
                            <i class="fa fa-history"></i>
                            <span>Chat History</span>
                        </button>
                    </div>
                </div>

                <!-- Main Content Area -->
                <div class="dashboard-main-content">
                    <!-- Modules Sidebar -->
                    <div class="modules-sidebar" id="modules-sidebar">
                        <div class="sidebar-header">
                            <h3><i class="fa fa-rocket"></i> Modules</h3>
                            <button class="sidebar-close" id="modules-close">
                                <i class="fa fa-times"></i>
                            </button>
                        </div>
                        <div class="modules-menu"></div>
                    </div>

                    <!-- Central Content -->
                    <div class="central-content">
                        <div class="dashboard-content"></div>
                    </div>

                    <!-- Chat History Sidebar -->
                    <div class="chat-history-sidebar" id="chat-history-sidebar">
                        <div class="chat-sidebar-header">
                            <h3><i class="fa fa-comments"></i> Chat History</h3>
                            <div class="chat-header-actions">
                                <button class="btn-new-chat" id="new-chat-btn" title="New Chat">
                                    <i class="fa fa-plus"></i>
                                </button>
                                <button class="sidebar-close" id="chat-history-close">
                                    <i class="fa fa-times"></i>
                                </button>
                            </div>
                        </div>
                        
                        <div class="chat-sessions-container">
                            <div class="session-filters">
                                <select id="session-type-filter" class="form-control">
                                    <option value="">All Types</option>
                                    <option value="General Chat">General Chat</option>
                                    <option value="Data Analysis">Data Analysis</option>
                                    <option value="Report Generation">Report Generation</option>
                                    <option value="Web Research">Web Research</option>
                                    <option value="Document Analysis">Document Analysis</option>
                                </select>
                            </div>
                            
                            <div class="chat-sessions-list" id="chat-sessions-list">
                                <!-- Chat sessions will be loaded here -->
                            </div>
                            
                            <div class="chat-stats" id="chat-stats">
                                <!-- Chat statistics will be shown here -->
                            </div>
                        </div>
                    </div>
                </div>

                <!-- Overlay for mobile -->
                <div class="mobile-overlay" id="mobile-overlay"></div>
            </div>
        `);

        this.add_chatgpt_styles();
        this.setup_sidebar_controls();
    }

    hide_frappe_elements() {
        $('.navbar, .page-head, .breadcrumb-area').hide();
        $('body, .layout-main, .layout-main-section, .container-page, .page-wrapper').css({
            'margin': '0',
            'padding': '0',
            'max-width': 'none',
            'width': '100%',
            'overflow': 'hidden'
        });
    }

    setup_mobile_handlers() {
        // Mobile menu toggles
        $('#mobile-menu-toggle').on('click', () => {
            this.toggle_mobile_sidebar('modules');
        });

        $('#mobile-chat-toggle').on('click', () => {
            this.toggle_mobile_sidebar('chat');
        });

        // Mobile overlay
        $('#mobile-overlay').on('click', () => {
            this.close_mobile_sidebars();
        });

        // Window resize handler
        $(window).on('resize', () => {
            const was_mobile = this.is_mobile;
            this.is_mobile = window.innerWidth <= 768;
            
            if (was_mobile !== this.is_mobile) {
                this.close_mobile_sidebars();
            }
        });
    }

    toggle_mobile_sidebar(type) {
        if (type === 'modules') {
            $('.chatgpt-dashboard').toggleClass('modules-open');
            $('.chatgpt-dashboard').removeClass('chat-open');
        } else {
            $('.chatgpt-dashboard').toggleClass('chat-open');
            $('.chatgpt-dashboard').removeClass('modules-open');
        }

        if ($('.chatgpt-dashboard').hasClass('modules-open') || $('.chatgpt-dashboard').hasClass('chat-open')) {
            $('#mobile-overlay').addClass('active');
        } else {
            $('#mobile-overlay').removeClass('active');
        }
    }

    // Module loading and management methods
    async loadModule(moduleName, moduleClass) {
        try {
            // Check if module is already loaded
            if (this.modules[moduleName]) {
                return this.modules[moduleName];
            }

            // Create new module instance
            const module = new moduleClass(this);
            this.modules[moduleName] = module;
            
            return module;
        } catch (error) {
            console.error(`Error loading module ${moduleName}:`, error);
            return null;
        }
    }

    destroyModule(moduleName) {
        if (this.modules[moduleName]) {
            if (typeof this.modules[moduleName].destroy === 'function') {
                this.modules[moduleName].destroy();
            }
            delete this.modules[moduleName];
        }
    }

    destroyAllModules() {
        Object.keys(this.modules).forEach(moduleName => {
            this.destroyModule(moduleName);
        });
    }

    // ...existing code...

    close_mobile_sidebars() {
        $('.chatgpt-dashboard').removeClass('modules-open chat-open');
        $('#mobile-overlay').removeClass('active');
    }

    add_chatgpt_styles() {
        // Inject comprehensive dashboard styles if not already present
        if (!document.getElementById('comprehensive-dashboard-styles')) {
            const style = document.createElement('style');
            style.id = 'comprehensive-dashboard-styles';
            style.textContent = `
                /* Base Dashboard Styles */
                .chatgpt-dashboard {
                    width: 100%;
                    height: 100vh;
                    display: flex;
                    flex-direction: column;
                    font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
                    background: #ffffff;
                    color: #374151;
                    overflow: hidden;
                }
                
                /* Mobile Header */
                .mobile-header {
                    display: none;
                    justify-content: space-between;
                    align-items: center;
                    padding: 12px 16px;
                    background: #ffffff;
                    border-bottom: 1px solid #e5e7eb;
                    position: relative;
                    z-index: 100;
                }
                
                /* Ensure proper styling for all dashboard elements */
                .dashboard-sidebar, .main-content, .chat-sidebar {
                    transition: all 0.3s ease;
                }
            `;
            document.head.appendChild(style);
        }
    }

    setup_sidebar_controls() {
        // Desktop sidebar toggles
        $('#modules-sidebar-toggle').on('click', () => {
            $('.chatgpt-dashboard').toggleClass('modules-sidebar-open');
        });

        $('#chat-history-toggle').on('click', () => {
            $('.chatgpt-dashboard').toggleClass('chat-sidebar-open');
        });

        // Sidebar close buttons
        $('#modules-close').on('click', () => {
            $('.chatgpt-dashboard').removeClass('modules-sidebar-open modules-open');
        });

        $('#chat-history-close').on('click', () => {
            $('.chatgpt-dashboard').removeClass('chat-sidebar-open chat-open');
        });

        // New chat button
        $('#new-chat-btn').on('click', () => {
            this.create_new_chat_session();
        });

        // Session type filter
        $('#session-type-filter').on('change', () => {
            this.filter_chat_sessions();
        });
    }

    setup_filters() {
        const filter_wrapper = this.page.main.find('.dashboard-filters');
        
        this.company_filter = frappe.ui.form.make_control({
            parent: filter_wrapper,
            df: {
                fieldtype: 'Link',
                options: 'Company',
                label: 'Company',
                fieldname: 'company',
                default: frappe.defaults.get_user_default('Company')
            },
            render_input: true
        });

        this.from_date_filter = frappe.ui.form.make_control({
            parent: filter_wrapper,
            df: {
                fieldtype: 'Date',
                label: 'From Date',
                fieldname: 'from_date',
                default: frappe.datetime.add_months(frappe.datetime.get_today(), -12)
            },
            render_input: true
        });

        this.to_date_filter = frappe.ui.form.make_control({
            parent: filter_wrapper,
            df: {
                fieldtype: 'Date',
                label: 'To Date',
                fieldname: 'to_date',
                default: frappe.datetime.get_today()
            },
            render_input: true
        });

        filter_wrapper.append(`
            <button class="btn btn-primary btn-sm refresh-btn">
                <i class="fa fa-refresh"></i> Refresh
            </button>
        `);

        this.setup_filter_events();
    }

    setup_filter_events() {
        $('.refresh-btn').on('click', () => {
            this.get_filters();
            this.load_data();
        });

        [this.company_filter, this.from_date_filter, this.to_date_filter].forEach(filter => {
            filter.$input.on('change', () => {
                this.get_filters();
                this.load_data();
            });
        });
    }

    setup_modules_menu() {
        const menu_items = [
            { id: 'ai_assistant', icon: 'fa-comments', label: 'AI Assistant', priority: true },
            { id: 'risk_management', icon: 'fa-shield', label: 'AI Risk Manager', priority: true },
            { id: 'overview', icon: 'fa-dashboard', label: 'Executive Overview' },
            { id: 'financial', icon: 'fa-money', label: 'Financial Analytics' },
            { id: 'bank_cash', icon: 'fa-university', label: 'Bank & Cash' },
            { id: 'projects', icon: 'fa-tasks', label: 'Projects Dashboard' },
            { id: 'materials', icon: 'fa-cubes', label: 'Material Requests' },
            { id: 'purchase_orders', icon: 'fa-shopping-cart', label: 'Purchase Orders' },
            { id: 'sales', icon: 'fa-line-chart', label: 'Sales & CRM' },
            { id: 'hr', icon: 'fa-users', label: 'HR & Workforce' },
            { id: 'operations', icon: 'fa-cogs', label: 'Operations' }
        ];

        const modules_menu = this.page.main.find('.modules-menu');
        
        menu_items.forEach(item => {
            const priorityClass = item.priority ? 'priority-item' : '';
            modules_menu.append(`
                <div class="module-item ${item.id === 'ai_assistant' ? 'active' : ''} ${priorityClass}" data-view="${item.id}">
                    <i class="fa ${item.icon}"></i>
                    <span>${item.label}</span>
                </div>
            `);
        });

        $('.module-item').on('click', (e) => {
            const view = $(e.currentTarget).data('view');
            this.switch_view(view);
            
            // Close mobile sidebar after selection
            if (this.is_mobile) {
                this.close_mobile_sidebars();
            }
        });
    }

    switch_view(view) {
        $('.module-item').removeClass('active');
        $(`.module-item[data-view="${view}"]`).addClass('active');
        
        // Destroy all modules when switching views to free up resources
        this.destroyAllModules();
        
        // Use lazy loading for better performance
        this.switch_view_with_loading(view);
    }

    load_chat_sessions() {
        frappe.call({
            method: 'vacker_automation.vacker_automation.doctype.chat_session.chat_session.get_user_sessions',
            args: { limit: 50 },
            callback: (r) => {
                if (r.message) {
                    this.chat_sessions = r.message;
                    this.render_chat_sessions();
                    this.update_chat_stats();
                }
            }
        });
    }

    render_chat_sessions() {
        const sessions_list = $('#chat-sessions-list');
        sessions_list.empty();

        if (!this.chat_sessions.length) {
            sessions_list.html(`
                <div class="empty-state">
                    <i class="fa fa-comments-o"></i>
                    <h4>No Chat Sessions</h4>
                    <p>Start your first conversation with the AI assistant</p>
                    <button class="btn btn-primary btn-sm" id="start-chatting-btn">
                        <i class="fa fa-plus"></i> Start Chatting
                    </button>
                </div>
            `);
            
            // Add event listener for start chatting button
            $('#start-chatting-btn').on('click', () => {
                this.switch_view('ai_assistant');
            });
            
            return;
        }

        this.chat_sessions.forEach(session => {
            const isActive = session.name === this.current_session;
            const timeAgo = this.format_time_ago(session.last_message_at);
            
            // Safely escape HTML content to prevent syntax errors
            const safeName = (session.name || '').replace(/"/g, '&quot;');
            const safeTitle = (session.title || '').replace(/"/g, '&quot;').replace(/'/g, '&#39;');
            const safeSessionType = (session.session_type || '').replace(/"/g, '&quot;');
            const safeLatestMessage = (session.latest_message || 'No messages yet').replace(/"/g, '&quot;').replace(/'/g, '&#39;');
            const safeTotalMessages = session.total_messages || 0;
            
            sessions_list.append(`
                <div class="chat-session-item ${isActive ? 'active' : ''}" data-session="${safeName}">
                    <div class="session-header">
                        <div class="session-title" title="${safeTitle}">
                            ${safeTitle}
                        </div>
                        <div class="session-actions">
                            <button class="btn-edit-session" data-session="${safeName}" title="Rename">
                                <i class="fa fa-edit"></i>
                            </button>
                            <button class="btn-delete-session" data-session="${safeName}" title="Delete">
                                <i class="fa fa-trash"></i>
                            </button>
                        </div>
                    </div>
                    <div class="session-meta">
                        <span class="session-type">${safeSessionType}</span>
                        <span class="session-time">${timeAgo || ''}</span>
                    </div>
                    <div class="session-preview">
                        ${safeLatestMessage}
                    </div>
                    <div class="session-stats">
                        <span><i class="fa fa-comments"></i> ${safeTotalMessages}</span>
                    </div>
                </div>
            `);
        });

        this.setup_session_events();
    }

    setup_session_events() {
        // Session selection
        $('.chat-session-item').on('click', (e) => {
            if ($(e.target).closest('.session-actions').length) return;
            
            const session_name = $(e.currentTarget).data('session');
            this.load_chat_session(session_name);
        });

        // Edit session
        $('.btn-edit-session').on('click', (e) => {
            e.stopPropagation();
            const session_name = $(e.currentTarget).data('session');
            this.edit_session_title(session_name);
        });

        // Delete session
        $('.btn-delete-session').on('click', (e) => {
            e.stopPropagation();
            const session_name = $(e.currentTarget).data('session');
            this.delete_session(session_name);
        });
    }

    create_new_chat_session() {
        frappe.call({
            method: 'vacker_automation.vacker_automation.doctype.chat_session.chat_session.create_new_session',
            args: { session_type: 'General Chat' },
            callback: (r) => {
                if (r.message) {
                    this.current_session = r.message;
                    this.load_chat_sessions();
                    this.switch_view('ai_assistant');
                    frappe.show_alert('New chat session created!', 3);
                }
            }
        });
    }

    load_chat_session(session_name) {
        this.current_session = session_name;
        $('.chat-session-item').removeClass('active');
        
        // Safely escape the session name for jQuery selector
        const safe_session_name = (session_name || '').replace(/"/g, '\\"').replace(/'/g, "\\'");
        $(`.chat-session-item[data-session="${safe_session_name}"]`).addClass('active');
        
        // Load messages for this session
        frappe.call({
            method: 'vacker_automation.vacker_automation.doctype.chat_message.chat_message.get_session_messages',
            args: { chat_session: session_name },
            callback: (r) => {
                if (r.message) {
                    this.load_session_messages(r.message);
                    this.switch_view('ai_assistant');
                }
            }
        });
    }

    load_session_messages(messages) {
        const chat_messages = $('#chat-messages');
        if (!chat_messages.length) return;
        
        chat_messages.empty();
        
        messages.forEach(message => {
            this.add_message_to_ui(
                message.message_type.toLowerCase() === 'user' ? 'user' : 'ai',
                message.content,
                message.timestamp,
                message.thinking_content
            );
        });
        
        chat_messages.scrollTop(chat_messages[0].scrollHeight);
    }

    filter_chat_sessions() {
        const filter_type = $('#session-type-filter').val();
        
        $('.chat-session-item').each(function() {
            const session_type = $(this).find('.session-type').text();
            if (!filter_type || session_type === filter_type) {
                $(this).show();
            } else {
                $(this).hide();
            }
        });
    }

    edit_session_title(session_name) {
        const session = this.chat_sessions.find(s => s.name === session_name);
        if (!session) return;

        frappe.prompt([
            {
                fieldtype: 'Data',
                label: 'Session Title',
                fieldname: 'title',
                reqd: 1,
                default: session.title
            }
        ], (values) => {
            frappe.call({
                method: 'vacker_automation.vacker_automation.doctype.chat_session.chat_session.update_session_title',
                args: {
                    session_name: session_name,
                    new_title: values.title
                },
                callback: (r) => {
                    if (r.message && r.message.success) {
                        this.load_chat_sessions();
                        frappe.show_alert('Session title updated!', 3);
                    }
                }
            });
        }, 'Rename Chat Session', 'Update');
    }

    delete_session(session_name) {
        frappe.confirm(
            'Are you sure you want to delete this chat session? This action cannot be undone.',
            () => {
                frappe.call({
                    method: 'vacker_automation.vacker_automation.doctype.chat_session.chat_session.delete_session',
                    args: { session_name: session_name },
                    callback: (r) => {
                        if (r.message && r.message.success) {
                            if (this.current_session === session_name) {
                                this.current_session = null;
                            }
                            this.load_chat_sessions();
                            frappe.show_alert('Session deleted!', 3);
                        }
                    }
                });
            }
        );
    }

    update_chat_stats() {
        frappe.call({
            method: 'vacker_automation.vacker_automation.doctype.chat_message.chat_message.get_message_stats',
            callback: (r) => {
                if (r.message) {
                    const stats = r.message;
                    $('#chat-stats').html(`
                        <div class="stats-header">
                            <h4><i class="fa fa-bar-chart"></i> Your Chat Statistics</h4>
                        </div>
                        <div class="stats-grid">
                            <div class="stat-item">
                                <span class="stat-value">${stats.total_messages}</span>
                                <span class="stat-label">Total Messages</span>
                            </div>
                            <div class="stat-item">
                                <span class="stat-value">${stats.ai_messages}</span>
                                <span class="stat-label">AI Responses</span>
                            </div>
                            <div class="stat-item">
                                <span class="stat-value">${(stats.avg_response_time || 0).toFixed(1)}s</span>
                                <span class="stat-label">Avg Response</span>
                            </div>
                            <div class="stat-item">
                                <span class="stat-value">${stats.total_tokens}</span>
                                <span class="stat-label">Tokens Used</span>
                            </div>
                        </div>
                    `);
                }
            }
        });
    }

    get_filters() {
        this.filters = {
            company: this.company_filter.get_value(),
            from_date: this.from_date_filter.get_value(),
            to_date: this.to_date_filter.get_value()
        };
    }

    load_data() {
        this.get_filters();
        
        // Show loading indicator
        const content = this.page.main.find('.dashboard-content');
        content.html('<div class="loading-state"><i class="fa fa-spinner fa-spin"></i> Loading dashboard data...</div>');
        
        frappe.call({
            method: 'vacker_automation.vacker_automation.page.comprehensive_executive_dashboard.comprehensive_executive_dashboard.get_comprehensive_dashboard_data',
            args: { 
                filters: this.filters,
                lazy_load: true  // Enable lazy loading for performance
            },
            callback: (r) => {
                try {
                    if (r && r.message) {
                        const data = r.message;
                        
                        // Check if the response contains an error
                        if (data.error) {
                            throw new Error(data.message || 'Unknown error occurred');
                        }
                        
                        this.data = data;
                        // Cache core data
                        this.cache_data('core', this.data);
                        this.setup_modules_menu();
                        this.render_view();
                        
                        // Initialize AI enhancements after dashboard is ready
                        this.initialize_ai_enhancements();
                        
                        // Trigger data updated event for AI enhancements
                        $(document).trigger('dashboard_data_updated');
                        
                        console.log('Dashboard data loaded successfully');
                    } else {
                        throw new Error('No data received from server');
                    }
                } catch (error) {
                    console.error('Error processing dashboard data:', error);
                    this.show_error_state(content, 'Failed to process dashboard data', error.message);
                    this.log_client_error('load_data_callback', error, { response: r });
                }
            },
            error: (r) => {
                console.error('Dashboard loading error:', r);
                this.show_error_state(content, 'Error loading dashboard data', this.get_error_message(r));
                this.log_client_error('load_data_request', new Error('Request failed'), { response: r });
            }
        });
    }
    
    // Client-side caching methods
    cache_data(key, data) {
        if (!this.cache) this.cache = new Map();
        this.cache.set(key, {
            data: data,
            timestamp: Date.now()
        });
    }
    
    get_cached_data(key) {
        if (!this.cache) return null;
        const cached = this.cache.get(key);
        if (cached && (Date.now() - cached.timestamp) < this.cache_timeout) {
            return cached.data;
        }
        return null;
    }
    
    clear_cache() {
        if (this.cache) this.cache.clear();
    }
    
    // Enhanced lazy loading for specific modules with comprehensive error handling
    async load_module_data(module_name, force_refresh = false) {
        // Input validation
        if (!module_name || typeof module_name !== 'string') {
            console.error('Invalid module name provided:', module_name);
            this.show_error_message('Invalid module name provided');
            return null;
        }
        
        // Check if already loading
        if (!this.loading_modules) this.loading_modules = new Set();
        if (this.loading_modules.has(module_name)) {
            console.log(`Module ${module_name} is already loading`);
            return;
        }
        
        // Check cache first
        const cache_key = `module_${module_name}`;
        if (!force_refresh) {
            const cached_data = this.get_cached_data(cache_key);
            if (cached_data) {
                this.data = {...this.data, ...cached_data};
                if (!this.loaded_modules) this.loaded_modules = new Set();
                this.loaded_modules.add(module_name);
                return cached_data;
            }
        }
        
        this.loading_modules.add(module_name);
        
        try {
            // Show loading indicator
            this.show_module_loading(module_name);
            
            const response = await frappe.call({
                method: 'vacker_automation.vacker_automation.page.comprehensive_executive_dashboard.comprehensive_executive_dashboard.get_module_data',
                args: {
                    module_name: module_name,
                    filters: this.filters || {}
                },
                timeout: 30000  // 30 second timeout
            });
            
            if (response && response.message) {
                const module_data = response.message;
                
                // Check if the response contains an error
                if (module_data.error) {
                    throw new Error(module_data.message || `Failed to load ${module_name} module`);
                }
                
                this.data = {...this.data, ...module_data};
                this.cache_data(cache_key, module_data);
                if (!this.loaded_modules) this.loaded_modules = new Set();
                this.loaded_modules.add(module_name);
                
                console.log(`Successfully loaded module: ${module_name}`);
                return module_data;
            } else {
                throw new Error(`No data received for module: ${module_name}`);
            }
        } catch (error) {
            console.error(`Error loading module ${module_name}:`, error);
            
            // Log to server for debugging
            this.log_client_error('load_module_data', error, {
                module_name: module_name,
                filters: this.filters
            });
            
            // Show user-friendly error message
            this.show_error_alert(`Failed to load ${this.get_module_display_name(module_name)} module`, error.message);
            
            // Return empty data structure to prevent further errors
            return this.get_empty_module_data(module_name);
        } finally {
            this.loading_modules.delete(module_name);
            this.hide_module_loading(module_name);
        }
    }
    
    // Enhanced error handling helpers
    show_error_message(message, duration = 5000) {
        frappe.show_alert({
            message: message,
            indicator: 'red'
        }, duration);
    }
    
    show_error_alert(title, message) {
        frappe.msgprint({
            title: title,
            message: message,
            indicator: 'red'
        });
    }
    
    show_module_loading(module_name) {
        const display_name = this.get_module_display_name(module_name);
        const content = this.page.main.find('.dashboard-content');
        content.html(`
            <div class="loading-state">
                <i class="fa fa-spinner fa-spin"></i> 
                Loading ${display_name} module...
                <div class="loading-progress">
                    <div class="progress">
                        <div class="progress-bar progress-bar-striped active" style="width: 100%"></div>
                    </div>
                </div>
            </div>
        `);
    }
    
    hide_module_loading(module_name) {
        // Loading will be hidden when content is rendered
    }
    
    get_module_display_name(module_name) {
        const display_names = {
            'financial': 'Financial Analytics',
            'projects': 'Project Management',
            'materials': 'Materials Management',
            'sales': 'Sales & CRM',
            'hr': 'Human Resources',
            'purchase': 'Purchase Management',
            'operations': 'Operations',
            'system': 'System Analytics',
            'trends': 'Trend Analysis'
        };
        return display_names[module_name] || module_name;
    }
    
    get_empty_module_data(module_name) {
        // Return empty data structure based on module type
        const empty_structures = {
            'financial': { gl_overview: {}, cashflow_data: {}, bank_cash_analysis: {} },
            'projects': { project_profitability: {} },
            'materials': { material_requests: {}, procurement_summary: {}, inventory_overview: {} },
            'sales': { sales_overview: {}, sales_invoices_detailed: {}, customer_analytics: {} },
            'hr': { hr_summary: {}, workforce_analytics: {}, payroll_detailed: {}, expense_claims_overview: {} },
            'purchase': { purchase_orders_overview: {}, purchase_invoices_overview: {} },
            'operations': { manufacturing_overview: {}, items_analysis: {}, item_groups_analysis: {} },
            'system': { users_analysis: {}, payments_detailed: {} },
            'trends': { trend_analysis: {} }
        };
        return empty_structures[module_name] || {};
    }
    
    log_client_error(method, error, context = {}) {
        try {
            frappe.call({
                method: 'frappe.utils.logger.log_error',
                args: {
                    title: `Dashboard Client Error - ${method}`,
                    message: `Error: ${error.message}\nStack: ${error.stack}\nContext: ${JSON.stringify(context)}`
                },
                no_spinner: true
            });
        } catch (log_error) {
            console.error('Failed to log error to server:', log_error);
        }
    }
    
    show_error_state(content, title, message) {
        content.html(`
            <div class="error-state-enhanced">
                <div class="error-icon">
                    <i class="fa fa-exclamation-triangle"></i>
                </div>
                <h3>${title}</h3>
                <p>${message}</p>
                <div class="error-actions">
                    <button class="btn btn-primary" id="reload-page-btn">
                        <i class="fa fa-refresh"></i> Reload Page
                    </button>
                    <button class="btn btn-default" id="go-to-desk-btn">
                        <i class="fa fa-home"></i> Go to Desk
                    </button>
                </div>
                <div class="error-details">
                    <small>If the problem persists, please contact your system administrator.</small>
                </div>
            </div>
        `);
        
        // Add event listeners for error action buttons
        $('#reload-page-btn').on('click', () => {
            location.reload();
        });
        
        $('#go-to-desk-btn').on('click', () => {
            frappe.set_route('/');
        });
    }
    
    get_error_message(response) {
        if (response && response.message) {
            return response.message;
        } else if (response && response.exc) {
            return 'Server error occurred. Please check the logs.';
        } else {
            return 'Network or server connection error.';
        }
    }
    
    // Enhanced module switching with lazy loading
    async switch_view_with_loading(view) {
        const module_map = {
            'financial': ['financial'],
            'projects': ['projects'],
            'materials': ['materials'],
            'sales': ['sales'],
            'hr': ['hr'],
            'bank_cash': ['purchase'],
            'purchase_orders': ['purchase'],
            'operations': ['operations'],
            'risk_management': ['system']
        };
        
        const required_modules = module_map[view];
        
        if (required_modules && (!this.loaded_modules || !this.loaded_modules.has(required_modules[0]))) {
            const content = this.page.main.find('.dashboard-content');
            content.html(`<div class="loading-state"><i class="fa fa-spinner fa-spin"></i> Loading ${view} module...</div>`);
            
            try {
                await Promise.all(required_modules.map(module => this.load_module_data(module)));
            } catch (error) {
                console.error(`Error loading modules for ${view}:`, error);
                content.html(`<div class="error-state"><i class="fa fa-times-circle"></i> Failed to load ${view} module</div>`);
                return;
            }
        }
        
        this.current_view = view;
        this.render_view();
    }

        render_view() {
        const content = this.page.main.find('.dashboard-content');
        
        switch(this.current_view) {
            case 'ai_assistant':
                this.render_ai_assistant(content);
                break;
            case 'risk_management':
                this.render_risk_management_dashboard(content);
                break;
            case 'overview':
                this.render_overview(content);
                break;
            case 'financial':
                this.render_financial_dashboard(content);
                break;
            case 'projects':
                this.render_projects_dashboard(content);
                break;
            case 'sales':
                this.render_sales_dashboard(content);
                break;
            case 'materials':
                this.render_materials_modular(content);
                break;
            case 'hr':
                this.render_hr_dashboard(content);
                break;
            case 'bank_cash':
                this.render_bank_cash_modular(content);
                break;
            case 'purchase_orders':
                this.render_purchase_orders_modular(content);
                break;
            case 'operations':
                this.render_operations_modular(content);
                break;
            default:
                this.render_coming_soon(content);
        }
    }

    // Module loading and management methods
    async loadModule(moduleName, moduleClass) {
        try {
            // Check if module is already loaded
            if (this.modules[moduleName]) {
                return this.modules[moduleName];
            }

            // Create new module instance
            const module = new moduleClass(this);
            this.modules[moduleName] = module;
            
            return module;
        } catch (error) {
            console.error(`Error loading module ${moduleName}:`, error);
            return null;
        }
    }

    destroyModule(moduleName) {
        if (this.modules[moduleName]) {
            if (typeof this.modules[moduleName].destroy === 'function') {
                this.modules[moduleName].destroy();
            }
            delete this.modules[moduleName];
        }
    }

    destroyAllModules() {
        Object.keys(this.modules).forEach(moduleName => {
            this.destroyModule(moduleName);
        });
    }

    // Enhanced modular render methods
    async render_materials_modular(content) {
        this.destroyModule('materials');
        
        if (typeof MaterialsManagementModule !== 'undefined') {
            const module = await this.loadModule('materials', MaterialsManagementModule);
            if (module) {
                module.render(content);
                return;
            }
        }
        
        this.render_materials_dashboard(content);
    }

    async render_bank_cash_modular(content) {
        this.destroyModule('bank_cash');
        
        if (typeof BankCashManagementModule !== 'undefined') {
            const module = await this.loadModule('bank_cash', BankCashManagementModule);
            if (module) {
                module.render(content);
                return;
            }
        }
        
        this.render_bank_cash_dashboard(content);
    }

    async render_purchase_orders_modular(content) {
        this.destroyModule('purchase_orders');
        
        if (typeof PurchaseOrdersManagementModule !== 'undefined') {
            const module = await this.loadModule('purchase_orders', PurchaseOrdersManagementModule);
            if (module) {
                module.render(content);
                return;
            }
        }
        
        this.render_purchase_orders_dashboard(content);
    }

    async render_operations_modular(content) {
        this.destroyModule('operations');
        
        if (typeof OperationsManagementModule !== 'undefined') {
            const module = await this.loadModule('operations', OperationsManagementModule);
            if (module) {
                module.render(content);
                return;
            }
        }
        
        this.render_operations_dashboard(content);
    }

    render_sales_dashboard(content) {
        if (!this.data || !this.data.sales_overview) {
            content.html('<div class="loading-state"><i class="fa fa-spinner fa-spin"></i> Loading sales data...</div>');
            return;
        }

        const sales = this.data.sales_overview;
        const summary = sales.sales_summary || {};
        const customers = sales.top_customers || [];

        content.html(`
            <div class="sales-dashboard">
                <div class="dashboard-header">
                    <h1><i class="fa fa-line-chart"></i> Sales & CRM Dashboard</h1>
                    <p>Sales performance and customer relationship insights</p>
                </div>

                <div class="sales-metrics">
                    <div class="metric-card">
                        <div class="metric-icon"><i class="fa fa-money"></i></div>
                        <div class="metric-value">$${this.formatCurrency(summary.total_sales || 0)}</div>
                        <div class="metric-label">Total Sales</div>
                    </div>
                    
                    <div class="metric-card">
                        <div class="metric-icon"><i class="fa fa-shopping-cart"></i></div>
                        <div class="metric-value">${summary.total_orders || 0}</div>
                        <div class="metric-label">Total Orders</div>
                    </div>
                    
                    <div class="metric-card">
                        <div class="metric-icon"><i class="fa fa-users"></i></div>
                        <div class="metric-value">${summary.unique_customers || 0}</div>
                        <div class="metric-label">Customers</div>
                    </div>
                    
                    <div class="metric-card">
                        <div class="metric-icon"><i class="fa fa-calculator"></i></div>
                        <div class="metric-value">$${this.formatCurrency(summary.avg_order_value || 0)}</div>
                        <div class="metric-label">Avg Order Value</div>
                    </div>
                </div>

                <div class="top-customers-section">
                    <h3><i class="fa fa-star"></i> Top Customers</h3>
                    <div class="customers-table">
                        <div class="table-header">
                            <span>Customer</span>
                            <span>Orders</span>
                            <span>Total Sales</span>
                            <span>Avg Order</span>
                        </div>
                        ${customers.slice(0, 10).map(customer => `
                            <div class="table-row">
                                <span class="customer-name">${customer.customer_name || customer.customer}</span>
                                <span>${customer.order_count}</span>
                                <span>$${this.formatCurrency(customer.total_sales)}</span>
                                <span>$${this.formatCurrency(customer.avg_order_value)}</span>
                            </div>
                        `).join('') || '<div class="no-data">No customer data available</div>'}
                    </div>
                </div>
            </div>
        `);
    }

    render_materials_dashboard(content) {
        if (!this.data || !this.data.material_requests) {
            content.html('<div class="loading-state"><i class="fa fa-spinner fa-spin"></i> Loading materials data...</div>');
            return;
        }

        const materials = this.data.material_requests;
        const requests = materials.recent_requests || [];
        const statuses = materials.status_summary || [];

        content.html(`
            <div class="materials-dashboard">
                <div class="dashboard-header">
                    <h1><i class="fa fa-cubes"></i> Material Requests Dashboard</h1>
                    <p>Material request tracking and procurement insights</p>
                </div>

                <div class="material-status-cards">
                    ${statuses.map(status => `
                        <div class="status-card">
                            <h4>${status.status}</h4>
                            <div class="count">${status.count}</div>
                            <div class="value">$${this.formatCurrency(status.total_value || 0)}</div>
                        </div>
                    `).join('')}
                </div>

                <div class="recent-requests">
                    <h3><i class="fa fa-clock-o"></i> Recent Material Requests</h3>
                    <div class="requests-table">
                        <div class="table-header">
                            <span>Request ID</span>
                            <span>Date</span>
                            <span>Status</span>
                            <span>Items</span>
                            <span>Value</span>
                        </div>
                        ${requests.slice(0, 15).map(request => `
                            <div class="table-row">
                                <span class="request-id">${request.name}</span>
                                <span>${frappe.datetime.str_to_user(request.transaction_date)}</span>
                                <span class="status ${request.status.toLowerCase().replace(' ', '-')}">${request.status}</span>
                                <span>${request.items_count}</span>
                                <span>$${this.formatCurrency(request.total_value || 0)}</span>
                            </div>
                        `).join('') || '<div class="no-data">No material requests found</div>'}
                    </div>
                </div>
            </div>
        `);
    }

    render_hr_dashboard(content) {
        if (!this.data || !this.data.hr_summary) {
            content.html('<div class="loading-state"><i class="fa fa-spinner fa-spin"></i> Loading HR data...</div>');
            return;
        }

        const hr = this.data.hr_summary;
        const summary = hr.employee_summary?.[0] || {};
        const departments = hr.department_wise || [];
        const payroll = this.data.payroll_detailed || {};
        const workforce = this.data.workforce_analytics || {};

        content.html(`
            <div class="hr-dashboard">
                <div class="dashboard-header">
                    <h1><i class="fa fa-users"></i> HR & Workforce Dashboard</h1>
                    <p>Human resources and workforce analytics</p>
                </div>

                <div class="hr-metrics">
                    <div class="metric-card">
                        <div class="metric-icon"><i class="fa fa-users"></i></div>
                        <div class="metric-value">${summary.total_employees || 0}</div>
                        <div class="metric-label">Total Employees</div>
                    </div>
                    
                    <div class="metric-card">
                        <div class="metric-icon"><i class="fa fa-check-circle"></i></div>
                        <div class="metric-value">${summary.active_employees || 0}</div>
                        <div class="metric-label">Active Employees</div>
                    </div>
                    
                    <div class="metric-card">
                        <div class="metric-icon"><i class="fa fa-money"></i></div>
                        <div class="metric-value">$${this.formatCurrency(payroll.total_payroll || 0)}</div>
                        <div class="metric-label">Total Payroll</div>
                    </div>
                    
                    <div class="metric-card">
                        <div class="metric-icon"><i class="fa fa-percent"></i></div>
                        <div class="metric-value">${Math.round(workforce.retention_rate || 95)}%</div>
                        <div class="metric-label">Retention Rate</div>
                    </div>
                </div>

                <div class="hr-content-grid">
                    <div class="departments-section">
                        <h3><i class="fa fa-sitemap"></i> Department Distribution</h3>
                        <div class="departments-grid">
                            ${departments.slice(0, 8).map(dept => `
                                <div class="department-card">
                                    <h4>${dept.department || 'Unknown'}</h4>
                                    <div class="employee-count">${dept.employee_count} employees</div>
                                </div>
                            `).join('') || '<div class="no-data">No department data available</div>'}
                        </div>
                    </div>

                    <div class="payroll-section">
                        <h3><i class="fa fa-money"></i> Payroll Overview</h3>
                        <div class="payroll-stats">
                            <div class="stat-item">
                                <span class="stat-label">This Month</span>
                                <span class="stat-value">$${this.formatCurrency(payroll.current_month || 0)}</span>
                            </div>
                            <div class="stat-item">
                                <span class="stat-label">Last Month</span>
                                <span class="stat-value">$${this.formatCurrency(payroll.previous_month || 0)}</span>
                            </div>
                            <div class="stat-item">
                                <span class="stat-label">YTD Total</span>
                                <span class="stat-value">$${this.formatCurrency(payroll.ytd_total || 0)}</span>
                            </div>
                        </div>
                    </div>
                </div>

                <div class="employee-analytics">
                    <h3><i class="fa fa-chart-line"></i> Employee Analytics</h3>
                    <div class="analytics-grid">
                        <div class="gender-distribution">
                            <h4>Gender Distribution</h4>
                            <canvas id="gender-chart" width="300" height="200"></canvas>
                        </div>
                        <div class="department-chart">
                            <h4>Department Breakdown</h4>
                            <canvas id="department-chart" width="300" height="200"></canvas>
                        </div>
                    </div>
                </div>
            </div>
        `);

        this.render_hr_charts(summary, departments);
    }

    render_bank_cash_dashboard(content) {
        if (!this.data || !this.data.bank_cash_analysis) {
            content.html('<div class="loading-state"><i class="fa fa-spinner fa-spin"></i> Loading bank & cash data...</div>');
            return;
        }

        const bankCash = this.data.bank_cash_analysis;
        const accounts = bankCash.bank_accounts || [];
        const cashflow = this.data.cashflow_data || {};

        content.html(`
            <div class="bank-cash-dashboard">
                <div class="dashboard-header">
                    <h1><i class="fa fa-university"></i> Bank & Cash Management</h1>
                    <p>Banking and cash flow management insights</p>
                </div>

                <div class="cash-metrics">
                    <div class="metric-card">
                        <div class="metric-icon"><i class="fa fa-money"></i></div>
                        <div class="metric-value">$${this.formatCurrency(bankCash.total_cash || 0)}</div>
                        <div class="metric-label">Total Cash</div>
                    </div>
                    
                    <div class="metric-card">
                        <div class="metric-icon"><i class="fa fa-university"></i></div>
                        <div class="metric-value">${accounts.length}</div>
                        <div class="metric-label">Bank Accounts</div>
                    </div>
                    
                    <div class="metric-card">
                        <div class="metric-icon"><i class="fa fa-arrow-up"></i></div>
                        <div class="metric-value">$${this.formatCurrency(cashflow.cash_inflow || 0)}</div>
                        <div class="metric-label">Cash Inflow</div>
                    </div>
                    
                    <div class="metric-card">
                        <div class="metric-icon"><i class="fa fa-arrow-down"></i></div>
                        <div class="metric-value">$${this.formatCurrency(cashflow.cash_outflow || 0)}</div>
                        <div class="metric-label">Cash Outflow</div>
                    </div>
                </div>

                <div class="bank-accounts-section">
                    <h3><i class="fa fa-university"></i> Bank Accounts</h3>
                    <div class="accounts-table">
                        <div class="table-header">
                            <span>Account</span>
                            <span>Bank</span>
                            <span>Balance</span>
                            <span>Status</span>
                        </div>
                        ${accounts.slice(0, 10).map(account => `
                            <div class="table-row">
                                <span class="account-name">${account.account_name}</span>
                                <span>${account.bank || 'N/A'}</span>
                                <span class="balance ${account.balance >= 0 ? 'positive' : 'negative'}">
                                    $${this.formatCurrency(Math.abs(account.balance || 0))}
                                </span>
                                <span class="status active">Active</span>
                            </div>
                        `).join('') || '<div class="no-data">No bank accounts found</div>'}
                    </div>
                </div>

                <div class="cashflow-chart-section">
                    <h3><i class="fa fa-line-chart"></i> Cash Flow Analysis</h3>
                    <div class="chart-container">
                        <canvas id="cashflow-chart" width="800" height="300"></canvas>
                    </div>
                </div>
            </div>
        `);

        this.render_cashflow_chart();
    }

    render_purchase_orders_dashboard(content) {
        if (!this.data || !this.data.purchase_orders_overview) {
            content.html('<div class="loading-state"><i class="fa fa-spinner fa-spin"></i> Loading purchase orders data...</div>');
            return;
        }

        const po = this.data.purchase_orders_overview;
        const orders = po.recent_orders || [];
        const summary = po.summary || {};

        content.html(`
            <div class="purchase-orders-dashboard">
                <div class="dashboard-header">
                    <h1><i class="fa fa-shopping-cart"></i> Purchase Orders Dashboard</h1>
                    <p>Purchase order management and procurement analytics</p>
                </div>

                <div class="po-metrics">
                    <div class="metric-card">
                        <div class="metric-icon"><i class="fa fa-shopping-cart"></i></div>
                        <div class="metric-value">${summary.total_orders || 0}</div>
                        <div class="metric-label">Total Orders</div>
                    </div>
                    
                    <div class="metric-card">
                        <div class="metric-icon"><i class="fa fa-money"></i></div>
                        <div class="metric-value">$${this.formatCurrency(summary.total_value || 0)}</div>
                        <div class="metric-label">Total Value</div>
                    </div>
                    
                    <div class="metric-card">
                        <div class="metric-icon"><i class="fa fa-clock-o"></i></div>
                        <div class="metric-value">${summary.pending_orders || 0}</div>
                        <div class="metric-label">Pending Orders</div>
                    </div>
                    
                    <div class="metric-card">
                        <div class="metric-icon"><i class="fa fa-truck"></i></div>
                        <div class="metric-value">${summary.received_orders || 0}</div>
                        <div class="metric-label">Received Orders</div>
                    </div>
                </div>

                <div class="po-status-section">
                    <h3><i class="fa fa-pie-chart"></i> Order Status Distribution</h3>
                    <div class="status-charts">
                        <canvas id="po-status-chart" width="400" height="300"></canvas>
                    </div>
                </div>

                <div class="recent-po-section">
                    <h3><i class="fa fa-clock-o"></i> Recent Purchase Orders</h3>
                    <div class="po-table">
                        <div class="table-header">
                            <span>PO Number</span>
                            <span>Supplier</span>
                            <span>Date</span>
                            <span>Status</span>
                            <span>Total</span>
                        </div>
                        ${orders.slice(0, 15).map(order => `
                            <div class="table-row">
                                <span class="po-number">${order.name}</span>
                                <span>${order.supplier || 'N/A'}</span>
                                <span>${frappe.datetime.str_to_user(order.transaction_date)}</span>
                                <span class="status ${order.status.toLowerCase().replace(' ', '-')}">${order.status}</span>
                                <span>$${this.formatCurrency(order.grand_total || 0)}</span>
                            </div>
                        `).join('') || '<div class="no-data">No purchase orders found</div>'}
                    </div>
                </div>
            </div>
        `);

        this.render_po_charts();
    }

    render_operations_dashboard(content) {
        const inventory = this.data.inventory_overview || {};
        const manufacturing = this.data.manufacturing_overview || {};
        const items = this.data.items_analysis || {};

        content.html(`
            <div class="operations-dashboard">
                <div class="dashboard-header">
                    <h1><i class="fa fa-cogs"></i> Operations Management</h1>
                    <p>Operational efficiency and performance metrics</p>
                </div>

                <div class="ops-metrics">
                    <div class="metric-card">
                        <div class="metric-icon"><i class="fa fa-cubes"></i></div>
                        <div class="metric-value">${inventory.total_items || 0}</div>
                        <div class="metric-label">Inventory Items</div>
                    </div>
                    
                    <div class="metric-card">
                        <div class="metric-icon"><i class="fa fa-money"></i></div>
                        <div class="metric-value">$${this.formatCurrency(inventory.total_value || 0)}</div>
                        <div class="metric-label">Inventory Value</div>
                    </div>
                    
                    <div class="metric-card">
                        <div class="metric-icon"><i class="fa fa-industry"></i></div>
                        <div class="metric-value">${manufacturing.work_orders || 0}</div>
                        <div class="metric-label">Work Orders</div>
                    </div>
                    
                    <div class="metric-card">
                        <div class="metric-icon"><i class="fa fa-exclamation-triangle"></i></div>
                        <div class="metric-value">${inventory.low_stock_items || 0}</div>
                        <div class="metric-label">Low Stock Items</div>
                    </div>
                </div>

                <div class="ops-content-grid">
                    <div class="inventory-section">
                        <h3><i class="fa fa-boxes"></i> Inventory Overview</h3>
                        <div class="inventory-stats">
                            <div class="stat-row">
                                <span>Total Stock Value:</span>
                                <span>$${this.formatCurrency(inventory.stock_value || 0)}</span>
                            </div>
                            <div class="stat-row">
                                <span>Available Stock:</span>
                                <span>${inventory.available_qty || 0} units</span>
                            </div>
                            <div class="stat-row">
                                <span>Reserved Stock:</span>
                                <span>${inventory.reserved_qty || 0} units</span>
                            </div>
                        </div>
                    </div>

                    <div class="manufacturing-section">
                        <h3><i class="fa fa-industry"></i> Manufacturing</h3>
                        <div class="manufacturing-stats">
                            <div class="stat-row">
                                <span>Completed Orders:</span>
                                <span>${manufacturing.completed_orders || 0}</span>
                            </div>
                            <div class="stat-row">
                                <span>In Progress:</span>
                                <span>${manufacturing.in_progress || 0}</span>
                            </div>
                            <div class="stat-row">
                                <span>Production Rate:</span>
                                <span>${manufacturing.efficiency || 85}%</span>
                            </div>
                        </div>
                    </div>
                </div>

                <div class="top-items-section">
                    <h3><i class="fa fa-star"></i> Top Performing Items</h3>
                    <div class="items-table">
                        <div class="table-header">
                            <span>Item Code</span>
                            <span>Item Name</span>
                            <span>Stock Qty</span>
                            <span>Value</span>
                        </div>
                        ${(items.top_items || []).slice(0, 10).map(item => `
                            <div class="table-row">
                                <span class="item-code">${item.item_code}</span>
                                <span>${item.item_name}</span>
                                <span>${item.stock_qty || 0}</span>
                                <span>$${this.formatCurrency(item.stock_value || 0)}</span>
                            </div>
                        `).join('') || '<div class="no-data">No inventory data available</div>'}
                    </div>
                </div>
            </div>
        `);
    }

    render_risk_management_dashboard(content) {
        content.html(`
            <div class="risk-dashboard">
                <div class="dashboard-header">
                    <h1><i class="fa fa-shield"></i> AI Risk Management Center</h1>
                    <p>Comprehensive financial risk assessment, monitoring, and mitigation</p>
                </div>

                <div class="risk-actions-bar">
                    <button class="btn btn-primary" id="run-risk-scan">
                        <i class="fa fa-search"></i> Run Risk Scan
                    </button>
                    <button class="btn btn-info" id="create-assessment">
                        <i class="fa fa-plus"></i> New Assessment
                    </button>
                    <button class="btn btn-warning" id="schedule-monitoring">
                        <i class="fa fa-clock-o"></i> Setup Monitoring
                    </button>
                    <button class="btn btn-success" id="generate-risk-report">
                        <i class="fa fa-file-text"></i> Generate Report
                    </button>
                </div>

                <div class="risk-metrics-grid" id="risk-metrics">
                    <div class="loading-state">
                        <i class="fa fa-spinner fa-spin"></i> Loading risk data...
                    </div>
                </div>

                <div class="risk-content-grid">
                    <div class="risk-alerts-section">
                        <h3><i class="fa fa-exclamation-triangle"></i> Active Risk Alerts</h3>
                        <div class="risk-alerts-list" id="risk-alerts">
                            <!-- Risk alerts will be loaded here -->
                        </div>
                    </div>

                    <div class="recent-assessments-section">
                        <h3><i class="fa fa-history"></i> Recent Assessments</h3>
                        <div class="assessments-list" id="recent-assessments">
                            <!-- Recent assessments will be loaded here -->
                        </div>
                    </div>
                </div>

                <div class="risk-analysis-section">
                    <h3><i class="fa fa-chart-line"></i> Risk Analysis Dashboard</h3>
                    <div class="risk-charts-grid">
                        <div class="risk-chart-container">
                            <h4>Risk Level Distribution</h4>
                            <canvas id="risk-level-chart" width="300" height="200"></canvas>
                        </div>
                        
                        <div class="risk-chart-container">
                            <h4>Risk Trends Over Time</h4>
                            <canvas id="risk-trend-chart" width="300" height="200"></canvas>
                        </div>
                    </div>
                </div>
            </div>
        `);

        this.setup_risk_management_events();
        this.load_risk_dashboard_data();
    }

    setup_risk_management_events() {
        // Run automated risk scan
        $('#run-risk-scan').on('click', () => {
            this.run_automated_risk_scan();
        });

        // Create new assessment
        $('#create-assessment').on('click', () => {
            this.create_new_risk_assessment();
        });

        // Setup monitoring
        $('#schedule-monitoring').on('click', () => {
            this.setup_risk_monitoring();
        });

        // Generate risk report
        $('#generate-risk-report').on('click', () => {
            this.generate_comprehensive_risk_report();
        });
    }

    load_risk_dashboard_data() {
        frappe.call({
            method: 'vacker_automation.vacker_automation.doctype.ai_risk_manager.ai_risk_manager.get_risk_dashboard_data',
            callback: (r) => {
                if (r.message) {
                    this.render_risk_metrics(r.message);
                    this.render_risk_alerts(r.message.active_alerts || []);
                    this.render_recent_assessments(r.message.recent_assessments || []);
                    this.render_risk_charts(r.message.risk_summary || []);
                }
            }
        });
    }

    render_risk_metrics(data) {
        const risk_summary = data.risk_summary || [];
        const total_assessments = data.total_assessments || 0;
        const active_alerts = data.active_alerts?.length || 0;

        // Calculate overall risk score
        let overall_risk_score = 0;
        if (risk_summary.length > 0) {
            overall_risk_score = Math.round(
                risk_summary.reduce((sum, item) => sum + (item.avg_risk_score || 0), 0) / risk_summary.length
            );
        }

        $('#risk-metrics').html(`
            <div class="risk-metric-card overall-risk">
                <div class="metric-icon"><i class="fa fa-shield"></i></div>
                <div class="metric-content">
                    <h3>Overall Risk Score</h3>
                    <div class="metric-value risk-score-${overall_risk_score > 70 ? 'high' : overall_risk_score > 40 ? 'medium' : 'low'}">
                        ${overall_risk_score}/100
                    </div>
                    <div class="metric-label">${this.getRiskLevelText(overall_risk_score)}</div>
                </div>
            </div>
            
            <div class="risk-metric-card">
                <div class="metric-icon"><i class="fa fa-file-text"></i></div>
                <div class="metric-content">
                    <h3>Total Assessments</h3>
                    <div class="metric-value">${total_assessments}</div>
                    <div class="metric-label">Risk evaluations</div>
                </div>
            </div>
            
            <div class="risk-metric-card">
                <div class="metric-icon"><i class="fa fa-bell"></i></div>
                <div class="metric-content">
                    <h3>Active Alerts</h3>
                    <div class="metric-value alert-count">${active_alerts}</div>
                    <div class="metric-label">Requiring attention</div>
                </div>
            </div>
            
            <div class="risk-metric-card">
                <div class="metric-icon"><i class="fa fa-clock-o"></i></div>
                <div class="metric-content">
                    <h3>Last Scan</h3>
                    <div class="metric-value">2h ago</div>
                    <div class="metric-label">Automated monitoring</div>
                </div>
            </div>
        `);
    }

    render_risk_alerts(alerts) {
        const alertsList = $('#risk-alerts');
        
        if (!alerts.length) {
            alertsList.html(`
                <div class="no-alerts">
                    <i class="fa fa-check-circle"></i>
                    <h4>No Active Risk Alerts</h4>
                    <p>All systems operating within acceptable risk parameters</p>
                </div>
            `);
            return;
        }

        const alertsHtml = alerts.map(alert => {
            // Safely escape the alert name to prevent any issues
            const safeAlertName = (alert.name || '').replace(/"/g, '&quot;').replace(/'/g, '&#39;');
            const safeAssessmentName = (alert.risk_assessment_name || '').replace(/"/g, '&quot;').replace(/'/g, '&#39;');
            const safeRiskLevel = (alert.risk_level || '').toLowerCase();
            
            return `
                <div class="risk-alert-item ${safeRiskLevel}">
                    <div class="alert-header">
                        <span class="alert-title">${safeAssessmentName}</span>
                        <span class="alert-level ${safeRiskLevel}">${alert.risk_level}</span>
                    </div>
                    <div class="alert-meta">
                        <span class="alert-date">${frappe.datetime.str_to_user(alert.follow_up_date)}</span>
                        <button class="btn btn-sm btn-outline-primary view-risk-details-btn" data-alert-name="${safeAlertName}">
                            View Details
                        </button>
                    </div>
                </div>
            `;
        }).join('');

        alertsList.html(alertsHtml);
        
        // Add event listeners for view details buttons
        $('.view-risk-details-btn').on('click', (e) => {
            const alertName = $(e.currentTarget).data('alert-name');
            this.view_risk_details(alertName);
        });
    }

    render_recent_assessments(assessments) {
        const assessmentsList = $('#recent-assessments');
        
        if (!assessments.length) {
            assessmentsList.html(`
                <div class="no-assessments">
                    <i class="fa fa-info-circle"></i>
                    <h4>No Recent Assessments</h4>
                    <p>Run your first risk assessment to get started</p>
                    <button class="btn btn-primary btn-sm" id="create-new-assessment-btn">
                        Create Assessment
                    </button>
                </div>
            `);
            
            // Add event listener for create assessment button
            $('#create-new-assessment-btn').on('click', () => {
                this.create_new_risk_assessment();
            });
            
            return;
        }

        const assessmentsHtml = assessments.map(assessment => `
            <div class="assessment-item">
                <div class="assessment-header">
                    <span class="assessment-name">${assessment.risk_assessment_name}</span>
                    <span class="risk-badge ${assessment.risk_level.toLowerCase()}">${assessment.risk_level}</span>
                </div>
                <div class="assessment-meta">
                    <span class="assessment-date">${frappe.datetime.str_to_user(assessment.assessment_date)}</span>
                    <span class="assessment-status ${assessment.status.toLowerCase()}">${assessment.status}</span>
                </div>
            </div>
        `).join('');

        assessmentsList.html(assessmentsHtml);
    }

    render_risk_charts(risk_summary) {
        setTimeout(() => {
            // Risk Level Distribution Chart
            const riskLevelCtx = document.getElementById('risk-level-chart');
            if (riskLevelCtx && risk_summary.length) {
                new Chart(riskLevelCtx, {
                    type: 'doughnut',
                    data: {
                        labels: risk_summary.map(item => item.risk_level),
                        datasets: [{
                            data: risk_summary.map(item => item.count),
                            backgroundColor: ['#ef4444', '#f59e0b', '#3b82f6', '#10b981']
                        }]
                    },
                    options: {
                        responsive: true,
                        plugins: {
                            legend: { position: 'bottom' }
                        }
                    }
                });
            }

            // Risk Trend Chart (placeholder data)
            const riskTrendCtx = document.getElementById('risk-trend-chart');
            if (riskTrendCtx) {
                const months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun'];
                const riskScores = [25, 30, 18, 45, 32, 28];

                new Chart(riskTrendCtx, {
                    type: 'line',
                    data: {
                        labels: months,
                        datasets: [{
                            label: 'Average Risk Score',
                            data: riskScores,
                            borderColor: '#ef4444',
                            backgroundColor: 'rgba(239, 68, 68, 0.1)',
                            fill: true,
                            tension: 0.4
                        }]
                    },
                    options: {
                        responsive: true,
                        scales: {
                            y: {
                                beginAtZero: true,
                                max: 100
                            }
                        }
                    }
                });
            }
        }, 100);
    }

    run_automated_risk_scan() {
        frappe.show_alert('🔍 Running automated risk scan...', 5);
        
        frappe.call({
            method: 'vacker_automation.vacker_automation.doctype.ai_risk_manager.ai_risk_manager.run_automated_risk_scan',
            callback: (r) => {
                if (r.message && r.message.success) {
                    frappe.show_alert({
                        message: `Risk scan completed. Risk Level: ${r.message.risk_level}`,
                        indicator: r.message.risk_level === 'Critical' ? 'red' : r.message.risk_level === 'High' ? 'orange' : 'green'
                    }, 5);
                    
                    // Refresh the dashboard
                    this.load_risk_dashboard_data();
                    
                    // Show findings if critical
                    if (r.message.risk_level === 'Critical') {
                        frappe.msgprint({
                            title: '🚨 Critical Risk Detected',
                            message: r.message.critical_findings,
                            indicator: 'red'
                        });
                    }
                } else {
                    frappe.show_alert('Risk scan failed. Please try again.', 5);
                }
            }
        });
    }

    create_new_risk_assessment() {
        frappe.prompt([
            {
                fieldtype: 'Data',
                label: 'Assessment Name',
                fieldname: 'assessment_name',
                reqd: 1,
                default: `Risk Assessment - ${frappe.datetime.get_today()}`
            }
        ], (values) => {
            frappe.call({
                method: 'vacker_automation.vacker_automation.doctype.ai_risk_manager.ai_risk_manager.create_risk_assessment',
                args: {
                    assessment_name: values.assessment_name
                },
                callback: (r) => {
                    if (r.message && r.message.success) {
                        frappe.show_alert('✅ Risk assessment created successfully!', 5);
                        this.load_risk_dashboard_data();
                    } else {
                        frappe.show_alert('Failed to create risk assessment', 5);
                    }
                }
            });
        }, 'Create Risk Assessment', 'Create');
    }

    setup_risk_monitoring() {
        frappe.call({
            method: 'vacker_automation.vacker_automation.doctype.ai_risk_manager.ai_risk_manager.setup_risk_monitoring_schedule',
            callback: (r) => {
                if (r.message && r.message.success) {
                    frappe.show_alert('✅ Risk monitoring schedule setup complete!', 5);
                } else {
                    frappe.show_alert('Failed to setup monitoring schedule', 5);
                }
            }
        });
    }

    generate_comprehensive_risk_report() {
        frappe.show_alert('📊 Generating comprehensive risk report...', 5);
        
        // Create AI-powered risk report
        const reportPrompt = "Generate a comprehensive financial risk management report based on our current risk assessments, including executive summary, detailed analysis, and strategic recommendations.";
        
        frappe.call({
            method: 'vacker_automation.vacker_automation.doctype.ai_settings.ai_settings.chat_with_ai',
            args: {
                message: reportPrompt,
                context_data: JSON.stringify(this.data),
                thinking_mode: true
            },
            callback: (r) => {
                if (r.message && r.message.success) {
                    // Show the report in a dialog
                    const report_dialog = new frappe.ui.Dialog({
                        title: 'AI-Generated Risk Management Report',
                        fields: [
                            {
                                fieldtype: 'HTML',
                                fieldname: 'report_content'
                            }
                        ],
                        size: 'extra-large'
                    });
                    
                    const formatted_report = r.message.response.replace(/\n/g, '<br>');
                    report_dialog.fields_dict.report_content.$wrapper.html(`
                        <div class="risk-report-content">
                            <div class="report-header">
                                <h2>🛡️ Comprehensive Risk Management Report</h2>
                                <p class="report-date">Generated on: ${frappe.datetime.get_datetime_as_string()}</p>
                            </div>
                            <div class="report-body">
                                ${formatted_report}
                            </div>
                        </div>
                    `);
                    
                    report_dialog.show();
                } else {
                    frappe.show_alert('Failed to generate risk report', 5);
                }
            }
        });
    }

    view_risk_details(assessment_name) {
        frappe.call({
            method: 'vacker_automation.vacker_automation.doctype.ai_risk_manager.ai_risk_manager.get_ai_risk_recommendations',
            args: { risk_assessment_name: assessment_name },
            callback: (r) => {
                if (r.message && !r.message.error) {
                    const details = r.message;
                    
                    const details_dialog = new frappe.ui.Dialog({
                        title: `Risk Assessment Details - ${assessment_name}`,
                        fields: [
                            {
                                fieldtype: 'HTML',
                                fieldname: 'risk_details'
                            }
                        ],
                        size: 'large'
                    });
                    
                    details_dialog.fields_dict.risk_details.$wrapper.html(`
                        <div class="risk-details-content">
                            <div class="risk-level-banner ${details.risk_level.toLowerCase()}">
                                <h3>Risk Level: ${details.risk_level}</h3>
                            </div>
                            
                            <div class="risk-section">
                                <h4>🔍 Key Findings</h4>
                                <p>${details.findings}</p>
                            </div>
                            
                            <div class="risk-section">
                                <h4>💡 AI Recommendations</h4>
                                <p>${details.recommendations}</p>
                            </div>
                            
                            <div class="risk-section">
                                <h4>⚡ Mitigation Actions</h4>
                                <p>${details.mitigation_actions}</p>
                            </div>
                            
                            <div class="risk-section">
                                <h4>📅 Follow-up Date</h4>
                                <p>${frappe.datetime.str_to_user(details.follow_up_date)}</p>
                            </div>
                        </div>
                    `);
                    
                    details_dialog.show();
                }
            }
        });
    }

    getRiskLevelText(score) {
        if (score >= 80) return 'Critical Risk';
        if (score >= 60) return 'High Risk';
        if (score >= 30) return 'Medium Risk';
        return 'Low Risk';
    }

    render_coming_soon(content) {
        const moduleNames = {
            'bank_cash': 'Bank & Cash Management',
            'purchase_orders': 'Purchase Orders',
            'operations': 'Operations Management'
        };

        content.html(`
            <div class="coming-soon-container">
                <div class="coming-soon-content">
                    <div class="coming-soon-icon">
                        <i class="fa fa-rocket"></i>
                    </div>
                    <h2>${moduleNames[this.current_view] || this.current_view.replace('_', ' ').toUpperCase()}</h2>
                    <p>This powerful module is coming soon with advanced analytics and insights!</p>
                    <div class="features-preview">
                        <div class="feature-item">
                            <i class="fa fa-chart-bar"></i>
                            <span>Advanced Analytics</span>
                        </div>
                        <div class="feature-item">
                            <i class="fa fa-dashboard"></i>
                            <span>Real-time Dashboards</span>
                        </div>
                        <div class="feature-item">
                            <i class="fa fa-brain"></i>
                            <span>AI-Powered Insights</span>
                        </div>
                    </div>
                    <p class="suggestion">
                        💡 Meanwhile, try the <strong>AI Assistant</strong> for instant insights about your data!
                    </p>
                    <button class="btn-switch-ai" id="switch-to-ai-btn">
                        <i class="fa fa-robot"></i> Chat with AI Assistant
                    </button>
                </div>
            </div>
        `);

        // Add event listener for the AI switch button
        $('#switch-to-ai-btn').on('click', () => {
            this.switch_view('ai_assistant');
        });
    }

    render_ai_assistant(content) {
        content.html(`
            <div class="ai-chat-interface">
                <div class="chat-container">
                    <div class="chat-messages" id="chat-messages">
                        ${this.current_session ? '' : this.get_welcome_message()}
                    </div>
                    
                    <div class="chat-input-area">
                        <div class="chat-features">
                            <button class="feature-btn" id="thinking-mode-toggle" title="Thinking Mode">
                                <i class="fa fa-brain"></i>
                            </button>
                            <button class="feature-btn" id="web-search-toggle" title="Web Search">
                                <i class="fa fa-search"></i>
                            </button>
                            <button class="feature-btn" id="document-upload" title="Upload Document">
                                <i class="fa fa-paperclip"></i>
                            </button>
                        </div>
                        
                        <div class="input-container">
                            <textarea id="chat-input" placeholder="Message AI Assistant..." rows="1"></textarea>
                            <button class="send-btn" id="send-message">
                                <i class="fa fa-paper-plane"></i>
                            </button>
                        </div>
                        
                        <div class="quick-actions">
                            <button class="quick-btn" data-message="Analyze current dashboard data">
                                📊 Analyze Data
                            </button>
                            <button class="quick-btn" data-message="Generate a comprehensive business report">
                                📋 Generate Report
                            </button>
                            <button class="quick-btn" data-message="What are the key insights from our performance?">
                                💡 Key Insights
                            </button>
                        </div>
                    </div>
                </div>
                
                <input type="file" id="file-upload" multiple style="display: none;" accept=".pdf,.doc,.docx,.txt,.csv,.xlsx">
            </div>
        `);

        this.setup_ai_chat_events();
    }

    get_welcome_message() {
        return `
            <div class="welcome-container">
                <div class="ai-avatar">
                    <i class="fa fa-robot"></i>
                </div>
                <div class="welcome-content">
                    <h2>👋 Welcome to AI Business Intelligence</h2>
                    <p>I'm your advanced AI assistant with powerful capabilities:</p>
                    <div class="capabilities-grid">
                        <div class="capability">
                            <i class="fa fa-brain"></i>
                            <span>Advanced Reasoning</span>
                        </div>
                        <div class="capability">
                            <i class="fa fa-search"></i>
                            <span>Web Research</span>
                        </div>
                        <div class="capability">
                            <i class="fa fa-file-text"></i>
                            <span>Document Analysis</span>
                        </div>
                        <div class="capability">
                            <i class="fa fa-chart-line"></i>
                            <span>Data Insights</span>
                        </div>
                    </div>
                    <p>Ask me anything about your business data, request analysis, or start a conversation!</p>
                </div>
            </div>
        `;
    }

    setup_ai_chat_events() {
        // Auto-resize textarea
        $('#chat-input').on('input', function() {
            this.style.height = 'auto';
            this.style.height = Math.min(this.scrollHeight, 120) + 'px';
        });

        // Send on Enter (Shift+Enter for new line)
        $('#chat-input').on('keydown', (e) => {
            if (e.key === 'Enter' && !e.shiftKey) {
                e.preventDefault();
                this.send_message();
            }
        });

        // Send button
        $('#send-message').on('click', () => {
            this.send_message();
        });

        // Feature toggles
        $('#thinking-mode-toggle').on('click', function() {
            $(this).toggleClass('active');
        });

        $('#web-search-toggle').on('click', function() {
            $(this).toggleClass('active');
        });

        $('#document-upload').on('click', () => {
            $('#file-upload').click();
        });

        // Quick actions
        $('.quick-btn').on('click', (e) => {
            const message = $(e.target).data('message');
            $('#chat-input').val(message);
            this.send_message();
        });

        // File upload
        $('#file-upload').on('change', (e) => {
            this.handle_file_upload(e.target.files);
        });
    }

    send_message() {
        const input = $('#chat-input');
        const message = input.val().trim();
        
        if (!message) return;

        const thinking_mode = $('#thinking-mode-toggle').hasClass('active');
        const web_search = $('#web-search-toggle').hasClass('active');

        // Clear input and reset height
        input.val('').css('height', 'auto');

        // Add user message to UI
        this.add_message_to_ui('user', message);

        // Show typing indicator
        this.show_typing_indicator();

        // Send to AI
        frappe.call({
            method: 'vacker_automation.vacker_automation.doctype.ai_settings.ai_settings.chat_with_ai',
            args: {
                message: message,
                context_data: JSON.stringify(this.data),
                chat_session: this.current_session,
                thinking_mode: thinking_mode,
                enable_web_search: web_search,
                date_range: this.filters
            },
            callback: (r) => {
                this.hide_typing_indicator();
                
                if (r.message && r.message.success) {
                    this.current_session = r.message.chat_session;
                    
                    let response_text = r.message.response;
                    if (thinking_mode && r.message.thinking) {
                        response_text = `🧠 **Thinking Process:**\n\n${r.message.thinking}\n\n📝 **Response:**\n\n${response_text}`;
                    }
                    
                    this.add_message_to_ui('ai', response_text);
                    this.load_chat_sessions(); // Refresh sessions
                } else {
                    this.add_message_to_ui('ai', r.message?.error || 'Sorry, I encountered an error. Please try again.');
                }
            }
        });
    }

    add_message_to_ui(sender, content, timestamp = null, thinking_content = null) {
        const messages = $('#chat-messages');
        if (!messages.length) {
            console.warn('Chat messages container not found');
            return;
        }
        
        const isUser = sender === 'user';
        const time = timestamp ? frappe.datetime.str_to_user(timestamp) : frappe.datetime.get_time(frappe.datetime.now_datetime());
        
        // Safely format the message content
        const formattedContent = this.format_message(content || '');
        const safeTime = (time || '').replace(/"/g, '&quot;').replace(/'/g, '&#39;');
        
        const messageHtml = `
            <div class="chat-message ${isUser ? 'user-message' : 'ai-message'}">
                <div class="message-avatar">
                    <i class="fa ${isUser ? 'fa-user' : 'fa-robot'}"></i>
                </div>
                <div class="message-content">
                    <div class="message-text">${formattedContent}</div>
                    <div class="message-time">${safeTime}</div>
                </div>
            </div>
        `;
        
        try {
            messages.append(messageHtml);
            messages.scrollTop(messages[0].scrollHeight);
        } catch (error) {
            console.error('Error appending message to UI:', error);
            console.error('Problematic HTML:', messageHtml);
        }
    }

    format_message(content) {
        if (!content || typeof content !== 'string') {
            return '';
        }
        
        // First escape HTML to prevent XSS and parsing errors
        const escaped = content
            .replace(/&/g, '&amp;')
            .replace(/</g, '&lt;')
            .replace(/>/g, '&gt;')
            .replace(/"/g, '&quot;')
            .replace(/'/g, '&#39;');
        
        // Then apply markdown-like formatting
        return escaped
            .replace(/\*\*(.*?)\*\*/g, '<strong>$1</strong>')
            .replace(/\*(.*?)\*/g, '<em>$1</em>')
            .replace(/```(.*?)```/gs, '<pre><code>$1</code></pre>')
            .replace(/`(.*?)`/g, '<code>$1</code>')
            .replace(/\n/g, '<br>');
    }

    show_typing_indicator() {
        const messages = $('#chat-messages');
        messages.append(`
            <div class="chat-message ai-message typing-indicator" id="typing-indicator">
                <div class="message-avatar">
                    <i class="fa fa-robot"></i>
                </div>
                <div class="message-content">
                    <div class="typing-animation">
                        <span></span>
                        <span></span>
                        <span></span>
                    </div>
                </div>
            </div>
        `);
        messages.scrollTop(messages[0].scrollHeight);
    }

    hide_typing_indicator() {
        $('#typing-indicator').remove();
    }

    handle_file_upload(files) {
        if (!files.length) return;
        
        frappe.show_alert(`📎 ${files.length} file(s) uploaded for analysis`, 3);
        
        const fileList = Array.from(files).map(file => file.name).join(', ');
        this.add_message_to_ui('user', `📎 **Uploaded Files:** ${fileList}\n\nPlease analyze these documents.`);
    }

    format_time_ago(datetime) {
        const now = new Date();
        const time = new Date(datetime);
        const diff = Math.floor((now - time) / 1000);

        if (diff < 60) return 'Just now';
        if (diff < 3600) return `${Math.floor(diff / 60)}m ago`;
        if (diff < 86400) return `${Math.floor(diff / 3600)}h ago`;
        if (diff < 604800) return `${Math.floor(diff / 86400)}d ago`;
        return frappe.datetime.str_to_user(datetime);
    }

    render_overview(content) {
        if (!this.data || !this.data.financial_summary) {
            content.html('<div class="loading-state"><i class="fa fa-spinner fa-spin"></i> Loading dashboard data...</div>');
            return;
        }

        const financial = this.data.financial_summary;
        const projects = this.data.project_overview;
        const sales = this.data.sales_overview;
        const kpis = this.data.kpi_dashboard;

        content.html(`
            <div class="executive-overview">
                <div class="overview-header">
                    <h1><i class="fa fa-dashboard"></i> Executive Overview</h1>
                    <p>Comprehensive business intelligence at a glance</p>
                </div>

                <!-- KPI Cards -->
                <div class="kpi-grid">
                    <div class="kpi-card revenue">
                        <div class="kpi-icon"><i class="fa fa-money"></i></div>
                        <div class="kpi-content">
                            <h3>Total Revenue</h3>
                            <div class="kpi-value">$${this.formatCurrency(financial.total_revenue || 0)}</div>
                            <div class="kpi-change">+12.5% from last period</div>
                        </div>
                    </div>
                    
                    <div class="kpi-card profit">
                        <div class="kpi-icon"><i class="fa fa-line-chart"></i></div>
                        <div class="kpi-content">
                            <h3>Net Profit</h3>
                            <div class="kpi-value">$${this.formatCurrency(financial.net_profit || 0)}</div>
                            <div class="kpi-change">${financial.profit_margin || 0}% margin</div>
                        </div>
                    </div>
                    
                    <div class="kpi-card projects">
                        <div class="kpi-icon"><i class="fa fa-tasks"></i></div>
                        <div class="kpi-content">
                            <h3>Active Projects</h3>
                            <div class="kpi-value">${projects?.performance_metrics?.total_projects || 0}</div>
                            <div class="kpi-change">${projects?.performance_metrics?.avg_completion || 0}% avg completion</div>
                        </div>
                    </div>
                    
                    <div class="kpi-card customers">
                        <div class="kpi-icon"><i class="fa fa-users"></i></div>
                        <div class="kpi-content">
                            <h3>Customers</h3>
                            <div class="kpi-value">${sales?.sales_summary?.unique_customers || 0}</div>
                            <div class="kpi-change">Active this period</div>
                        </div>
                    </div>
                </div>

                <!-- Charts Section -->
                <div class="charts-section">
                    <div class="chart-container">
                        <h3>Revenue vs Expenses</h3>
                        <canvas id="revenue-expense-chart" width="400" height="200"></canvas>
                    </div>
                    
                    <div class="chart-container">
                        <h3>Project Status Distribution</h3>
                        <canvas id="project-status-chart" width="400" height="200"></canvas>
                    </div>
                </div>

                <!-- Recent Activities -->
                <div class="recent-activities">
                    <h3><i class="fa fa-clock-o"></i> Recent Activities</h3>
                    <div class="activity-list">
                        <div class="activity-item">
                            <i class="fa fa-file-text-o"></i>
                            <span>New sales invoice created - $${this.formatCurrency(25000)}</span>
                            <small>2 hours ago</small>
                        </div>
                        <div class="activity-item">
                            <i class="fa fa-check-circle"></i>
                            <span>Project milestone completed</span>
                            <small>4 hours ago</small>
                        </div>
                        <div class="activity-item">
                            <i class="fa fa-shopping-cart"></i>
                            <span>Purchase order approved</span>
                            <small>6 hours ago</small>
                        </div>
                    </div>
                </div>
            </div>
        `);

        this.render_overview_charts();
    }

    render_financial_dashboard(content) {
        if (!this.data || !this.data.financial_summary) {
            content.html('<div class="loading-state"><i class="fa fa-spinner fa-spin"></i> Loading financial data...</div>');
            return;
        }

        const financial = this.data.financial_summary;
        const gl = this.data.gl_overview;
        const cashflow = this.data.cashflow_data;

        content.html(`
            <div class="financial-dashboard">
                <div class="dashboard-header">
                    <h1><i class="fa fa-money"></i> Financial Analytics</h1>
                    <p>Comprehensive financial performance and analysis</p>
                </div>

                <!-- Financial Summary Cards -->
                <div class="financial-summary">
                    <div class="summary-card">
                        <h4>Total Revenue</h4>
                        <div class="amount">$${this.formatCurrency(financial.total_revenue || 0)}</div>
                        <div class="transactions">${financial.revenue_transactions || 0} transactions</div>
                    </div>
                    
                    <div class="summary-card">
                        <h4>Total Expenses</h4>
                        <div class="amount expense">$${this.formatCurrency(financial.total_expenses || 0)}</div>
                        <div class="transactions">${financial.expense_transactions || 0} transactions</div>
                    </div>
                    
                    <div class="summary-card">
                        <h4>Net Profit</h4>
                        <div class="amount ${financial.net_profit >= 0 ? 'profit' : 'loss'}">
                            $${this.formatCurrency(financial.net_profit || 0)}
                        </div>
                        <div class="margin">${financial.profit_margin || 0}% margin</div>
                    </div>
                    
                    <div class="summary-card">
                        <h4>Total Assets</h4>
                        <div class="amount">$${this.formatCurrency(financial.total_assets || 0)}</div>
                        <div class="equity">Equity: $${this.formatCurrency(financial.total_equity || 0)}</div>
                    </div>
                </div>

                <!-- Charts Section -->
                <div class="financial-charts">
                    <div class="chart-row">
                        <div class="chart-container">
                            <h3>Revenue Trend</h3>
                            <canvas id="revenue-trend-chart" width="400" height="200"></canvas>
                        </div>
                        
                        <div class="chart-container">
                            <h3>Expense Breakdown</h3>
                            <canvas id="expense-breakdown-chart" width="400" height="200"></canvas>
                        </div>
                    </div>
                </div>

                <!-- Top Accounts -->
                <div class="top-accounts">
                    <div class="accounts-section">
                        <h3>Top Revenue Accounts</h3>
                        <div class="accounts-list">
                            ${gl?.top_revenue_accounts?.slice(0, 5).map(account => `
                                <div class="account-item">
                                    <span class="account-name">${account.account_name}</span>
                                    <span class="account-amount">$${this.formatCurrency(account.total_credit)}</span>
                                </div>
                            `).join('') || '<p>No data available</p>'}
                        </div>
                    </div>
                    
                    <div class="accounts-section">
                        <h3>Top Expense Accounts</h3>
                        <div class="accounts-list">
                            ${gl?.top_expense_accounts?.slice(0, 5).map(account => `
                                <div class="account-item">
                                    <span class="account-name">${account.account_name}</span>
                                    <span class="account-amount">$${this.formatCurrency(account.total_debit)}</span>
                                </div>
                            `).join('') || '<p>No data available</p>'}
                        </div>
                    </div>
                </div>
            </div>
        `);

        this.render_financial_charts();
    }

    render_projects_dashboard(content) {
        if (!this.data || !this.data.project_overview) {
            content.html('<div class="loading-state"><i class="fa fa-spinner fa-spin"></i> Loading projects data...</div>');
            return;
        }

        const projects = this.data.project_overview;
        const metrics = projects.performance_metrics || {};

        content.html(`
            <div class="projects-dashboard">
                <div class="dashboard-header">
                    <h1><i class="fa fa-tasks"></i> Projects Dashboard</h1>
                    <p>Project performance and management insights</p>
                </div>

                <!-- Project Metrics -->
                <div class="project-metrics">
                    <div class="metric-card">
                        <div class="metric-icon"><i class="fa fa-briefcase"></i></div>
                        <div class="metric-value">${metrics.total_projects || 0}</div>
                        <div class="metric-label">Total Projects</div>
                    </div>
                    
                    <div class="metric-card">
                        <div class="metric-icon"><i class="fa fa-check-circle"></i></div>
                        <div class="metric-value">${metrics.completed_projects || 0}</div>
                        <div class="metric-label">Completed</div>
                    </div>
                    
                    <div class="metric-card">
                        <div class="metric-icon"><i class="fa fa-clock-o"></i></div>
                        <div class="metric-value">${metrics.overdue_projects || 0}</div>
                        <div class="metric-label">Overdue</div>
                    </div>
                    
                    <div class="metric-card">
                        <div class="metric-icon"><i class="fa fa-percent"></i></div>
                        <div class="metric-value">${Math.round(metrics.avg_completion || 0)}%</div>
                        <div class="metric-label">Avg Completion</div>
                    </div>
                </div>

                <!-- Charts and Status -->
                <div class="project-charts">
                    <div class="chart-container">
                        <h3>Project Status Distribution</h3>
                        <canvas id="project-status-pie-chart" width="300" height="200"></canvas>
                    </div>
                    
                    <div class="status-list">
                        <h3>Project Status Summary</h3>
                        ${projects.project_status?.map(status => `
                            <div class="status-item">
                                <span class="status-name">${status.status}</span>
                                <span class="status-count">${status.count} projects</span>
                                <span class="status-value">$${this.formatCurrency(status.total_value || 0)}</span>
                            </div>
                        `).join('') || '<p>No status data available</p>'}
                    </div>
                </div>

                <!-- Critical Projects -->
                <div class="critical-projects">
                    <h3><i class="fa fa-exclamation-triangle"></i> Critical Projects</h3>
                    <div class="projects-table">
                        <div class="table-header">
                            <span>Project</span>
                            <span>Customer</span>
                            <span>Status</span>
                            <span>Completion</span>
                            <span>Due Date</span>
                            <span>Value</span>
                        </div>
                        ${projects.critical_projects?.slice(0, 10).map(project => `
                            <div class="table-row ${project.days_overdue > 0 ? 'overdue' : ''}">
                                <span class="project-name" title="${project.project_name}">${project.project_name}</span>
                                <span>${project.customer || '-'}</span>
                                <span class="status ${project.status.toLowerCase().replace(' ', '-')}">${project.status}</span>
                                <span>${project.percent_complete || 0}%</span>
                                <span>${frappe.datetime.str_to_user(project.expected_end_date)}</span>
                                <span>$${this.formatCurrency(project.total_sales_amount || 0)}</span>
                            </div>
                        `).join('') || '<div class="no-data">No critical projects found</div>'}
                    </div>
                </div>
            </div>
        `);

        this.render_project_charts();
    }

    render_materials_dashboard(content) {
        if (!this.data || !this.data.material_requests) {
            content.html('<div class="loading-state"><i class="fa fa-spinner fa-spin"></i> Loading materials data...</div>');
            return;
        }

        const materials = this.data.material_requests;
        const requests = materials.recent_requests || [];
        const statuses = materials.status_summary || [];

        content.html(`
            <div class="materials-dashboard">
                <div class="dashboard-header">
                    <h1><i class="fa fa-cubes"></i> Material Requests Dashboard</h1>
                    <p>Material request tracking and procurement insights</p>
                </div>

                <div class="material-status-cards">
                    ${statuses.map(status => `
                        <div class="status-card">
                            <h4>${status.status}</h4>
                            <div class="count">${status.count}</div>
                            <div class="value">$${this.formatCurrency(status.total_value || 0)}</div>
                        </div>
                    `).join('')}
                </div>

                <div class="recent-requests">
                    <h3><i class="fa fa-clock-o"></i> Recent Material Requests</h3>
                    <div class="requests-table">
                        <div class="table-header">
                            <span>Request ID</span>
                            <span>Date</span>
                            <span>Status</span>
                            <span>Items</span>
                            <span>Value</span>
                        </div>
                        ${requests.slice(0, 15).map(request => `
                            <div class="table-row">
                                <span class="request-id">${request.name}</span>
                                <span>${frappe.datetime.str_to_user(request.transaction_date)}</span>
                                <span class="status ${request.status.toLowerCase().replace(' ', '-')}">${request.status}</span>
                                <span>${request.items_count}</span>
                                <span>$${this.formatCurrency(request.total_value || 0)}</span>
                            </div>
                        `).join('') || '<div class="no-data">No material requests found</div>'}
                    </div>
                </div>
            </div>
        `);
    }

    render_hr_dashboard(content) {
        if (!this.data || !this.data.hr_summary) {
            content.html('<div class="loading-state"><i class="fa fa-spinner fa-spin"></i> Loading HR data...</div>');
            return;
        }

        const hr = this.data.hr_summary;
        const summary = hr.employee_summary?.[0] || {};
        const departments = hr.department_wise || [];
        const payroll = this.data.payroll_detailed || {};
        const workforce = this.data.workforce_analytics || {};

        content.html(`
            <div class="hr-dashboard">
                <div class="dashboard-header">
                    <h1><i class="fa fa-users"></i> HR & Workforce Dashboard</h1>
                    <p>Human resources and workforce analytics</p>
                </div>

                <div class="hr-metrics">
                    <div class="metric-card">
                        <div class="metric-icon"><i class="fa fa-users"></i></div>
                        <div class="metric-value">${summary.total_employees || 0}</div>
                        <div class="metric-label">Total Employees</div>
                    </div>
                    
                    <div class="metric-card">
                        <div class="metric-icon"><i class="fa fa-check-circle"></i></div>
                        <div class="metric-value">${summary.active_employees || 0}</div>
                        <div class="metric-label">Active Employees</div>
                    </div>
                    
                    <div class="metric-card">
                        <div class="metric-icon"><i class="fa fa-money"></i></div>
                        <div class="metric-value">$${this.formatCurrency(payroll.total_payroll || 0)}</div>
                        <div class="metric-label">Total Payroll</div>
                    </div>
                    
                    <div class="metric-card">
                        <div class="metric-icon"><i class="fa fa-percent"></i></div>
                        <div class="metric-value">${Math.round(workforce.retention_rate || 95)}%</div>
                        <div class="metric-label">Retention Rate</div>
                    </div>
                </div>

                <div class="hr-content-grid">
                    <div class="departments-section">
                        <h3><i class="fa fa-sitemap"></i> Department Distribution</h3>
                        <div class="departments-grid">
                            ${departments.slice(0, 8).map(dept => `
                                <div class="department-card">
                                    <h4>${dept.department || 'Unknown'}</h4>
                                    <div class="employee-count">${dept.employee_count} employees</div>
                                </div>
                            `).join('') || '<div class="no-data">No department data available</div>'}
                        </div>
                    </div>

                    <div class="payroll-section">
                        <h3><i class="fa fa-money"></i> Payroll Overview</h3>
                        <div class="payroll-stats">
                            <div class="stat-item">
                                <span class="stat-label">This Month</span>
                                <span class="stat-value">$${this.formatCurrency(payroll.current_month || 0)}</span>
                            </div>
                            <div class="stat-item">
                                <span class="stat-label">Last Month</span>
                                <span class="stat-value">$${this.formatCurrency(payroll.previous_month || 0)}</span>
                            </div>
                            <div class="stat-item">
                                <span class="stat-label">YTD Total</span>
                                <span class="stat-value">$${this.formatCurrency(payroll.ytd_total || 0)}</span>
                            </div>
                        </div>
                    </div>
                </div>

                <div class="employee-analytics">
                    <h3><i class="fa fa-chart-line"></i> Employee Analytics</h3>
                    <div class="analytics-grid">
                        <div class="gender-distribution">
                            <h4>Gender Distribution</h4>
                            <canvas id="gender-chart" width="300" height="200"></canvas>
                        </div>
                        <div class="department-chart">
                            <h4>Department Breakdown</h4>
                            <canvas id="department-chart" width="300" height="200"></canvas>
                        </div>
                    </div>
                </div>
            </div>
        `);

        this.render_hr_charts(summary, departments);
    }

    render_bank_cash_dashboard(content) {
        if (!this.data || !this.data.bank_cash_analysis) {
            content.html('<div class="loading-state"><i class="fa fa-spinner fa-spin"></i> Loading bank & cash data...</div>');
            return;
        }

        const bankCash = this.data.bank_cash_analysis;
        const accounts = bankCash.bank_accounts || [];
        const cashflow = this.data.cashflow_data || {};

        content.html(`
            <div class="bank-cash-dashboard">
                <div class="dashboard-header">
                    <h1><i class="fa fa-university"></i> Bank & Cash Management</h1>
                    <p>Banking and cash flow management insights</p>
                </div>

                <div class="cash-metrics">
                    <div class="metric-card">
                        <div class="metric-icon"><i class="fa fa-money"></i></div>
                        <div class="metric-value">$${this.formatCurrency(bankCash.total_cash || 0)}</div>
                        <div class="metric-label">Total Cash</div>
                    </div>
                    
                    <div class="metric-card">
                        <div class="metric-icon"><i class="fa fa-university"></i></div>
                        <div class="metric-value">${accounts.length}</div>
                        <div class="metric-label">Bank Accounts</div>
                    </div>
                    
                    <div class="metric-card">
                        <div class="metric-icon"><i class="fa fa-arrow-up"></i></div>
                        <div class="metric-value">$${this.formatCurrency(cashflow.cash_inflow || 0)}</div>
                        <div class="metric-label">Cash Inflow</div>
                    </div>
                    
                    <div class="metric-card">
                        <div class="metric-icon"><i class="fa fa-arrow-down"></i></div>
                        <div class="metric-value">$${this.formatCurrency(cashflow.cash_outflow || 0)}</div>
                        <div class="metric-label">Cash Outflow</div>
                    </div>
                </div>

                <div class="bank-accounts-section">
                    <h3><i class="fa fa-university"></i> Bank Accounts</h3>
                    <div class="accounts-table">
                        <div class="table-header">
                            <span>Account</span>
                            <span>Bank</span>
                            <span>Balance</span>
                            <span>Status</span>
                        </div>
                        ${accounts.slice(0, 10).map(account => `
                            <div class="table-row">
                                <span class="account-name">${account.account_name}</span>
                                <span>${account.bank || 'N/A'}</span>
                                <span class="balance ${account.balance >= 0 ? 'positive' : 'negative'}">
                                    $${this.formatCurrency(Math.abs(account.balance || 0))}
                                </span>
                                <span class="status active">Active</span>
                            </div>
                        `).join('') || '<div class="no-data">No bank accounts found</div>'}
                    </div>
                </div>

                <div class="cashflow-chart-section">
                    <h3><i class="fa fa-line-chart"></i> Cash Flow Analysis</h3>
                    <div class="chart-container">
                        <canvas id="cashflow-chart" width="800" height="300"></canvas>
                    </div>
                </div>
            </div>
        `);

        this.render_cashflow_chart();
    }

    render_purchase_orders_dashboard(content) {
        if (!this.data || !this.data.purchase_orders_overview) {
            content.html('<div class="loading-state"><i class="fa fa-spinner fa-spin"></i> Loading purchase orders data...</div>');
            return;
        }

        const po = this.data.purchase_orders_overview;
        const orders = po.recent_orders || [];
        const summary = po.summary || {};

        content.html(`
            <div class="purchase-orders-dashboard">
                <div class="dashboard-header">
                    <h1><i class="fa fa-shopping-cart"></i> Purchase Orders Dashboard</h1>
                    <p>Purchase order management and procurement analytics</p>
                </div>

                <div class="po-metrics">
                    <div class="metric-card">
                        <div class="metric-icon"><i class="fa fa-shopping-cart"></i></div>
                        <div class="metric-value">${summary.total_orders || 0}</div>
                        <div class="metric-label">Total Orders</div>
                    </div>
                    
                    <div class="metric-card">
                        <div class="metric-icon"><i class="fa fa-money"></i></div>
                        <div class="metric-value">$${this.formatCurrency(summary.total_value || 0)}</div>
                        <div class="metric-label">Total Value</div>
                    </div>
                    
                    <div class="metric-card">
                        <div class="metric-icon"><i class="fa fa-clock-o"></i></div>
                        <div class="metric-value">${summary.pending_orders || 0}</div>
                        <div class="metric-label">Pending Orders</div>
                    </div>
                    
                    <div class="metric-card">
                        <div class="metric-icon"><i class="fa fa-truck"></i></div>
                        <div class="metric-value">${summary.received_orders || 0}</div>
                        <div class="metric-label">Received Orders</div>
                    </div>
                </div>

                <div class="po-status-section">
                    <h3><i class="fa fa-pie-chart"></i> Order Status Distribution</h3>
                    <div class="status-charts">
                        <canvas id="po-status-chart" width="400" height="300"></canvas>
                    </div>
                </div>

                <div class="recent-po-section">
                    <h3><i class="fa fa-clock-o"></i> Recent Purchase Orders</h3>
                    <div class="po-table">
                        <div class="table-header">
                            <span>PO Number</span>
                            <span>Supplier</span>
                            <span>Date</span>
                            <span>Status</span>
                            <span>Total</span>
                        </div>
                        ${orders.slice(0, 15).map(order => `
                            <div class="table-row">
                                <span class="po-number">${order.name}</span>
                                <span>${order.supplier || 'N/A'}</span>
                                <span>${frappe.datetime.str_to_user(order.transaction_date)}</span>
                                <span class="status ${order.status.toLowerCase().replace(' ', '-')}">${order.status}</span>
                                <span>$${this.formatCurrency(order.grand_total || 0)}</span>
                            </div>
                        `).join('') || '<div class="no-data">No purchase orders found</div>'}
                    </div>
                </div>
            </div>
        `);

        this.render_po_charts();
    }

    render_operations_dashboard(content) {
        const inventory = this.data.inventory_overview || {};
        const manufacturing = this.data.manufacturing_overview || {};
        const items = this.data.items_analysis || {};

        content.html(`
            <div class="operations-dashboard">
                <div class="dashboard-header">
                    <h1><i class="fa fa-cogs"></i> Operations Management</h1>
                    <p>Operational efficiency and performance metrics</p>
                </div>

                <div class="ops-metrics">
                    <div class="metric-card">
                        <div class="metric-icon"><i class="fa fa-cubes"></i></div>
                        <div class="metric-value">${inventory.total_items || 0}</div>
                        <div class="metric-label">Inventory Items</div>
                    </div>
                    
                    <div class="metric-card">
                        <div class="metric-icon"><i class="fa fa-money"></i></div>
                        <div class="metric-value">$${this.formatCurrency(inventory.total_value || 0)}</div>
                        <div class="metric-label">Inventory Value</div>
                    </div>
                    
                    <div class="metric-card">
                        <div class="metric-icon"><i class="fa fa-industry"></i></div>
                        <div class="metric-value">${manufacturing.work_orders || 0}</div>
                        <div class="metric-label">Work Orders</div>
                    </div>
                    
                    <div class="metric-card">
                        <div class="metric-icon"><i class="fa fa-exclamation-triangle"></i></div>
                        <div class="metric-value">${inventory.low_stock_items || 0}</div>
                        <div class="metric-label">Low Stock Items</div>
                    </div>
                </div>

                <div class="ops-content-grid">
                    <div class="inventory-section">
                        <h3><i class="fa fa-boxes"></i> Inventory Overview</h3>
                        <div class="inventory-stats">
                            <div class="stat-row">
                                <span>Total Stock Value:</span>
                                <span>$${this.formatCurrency(inventory.stock_value || 0)}</span>
                            </div>
                            <div class="stat-row">
                                <span>Available Stock:</span>
                                <span>${inventory.available_qty || 0} units</span>
                            </div>
                            <div class="stat-row">
                                <span>Reserved Stock:</span>
                                <span>${inventory.reserved_qty || 0} units</span>
                            </div>
                        </div>
                    </div>

                    <div class="manufacturing-section">
                        <h3><i class="fa fa-industry"></i> Manufacturing</h3>
                        <div class="manufacturing-stats">
                            <div class="stat-row">
                                <span>Completed Orders:</span>
                                <span>${manufacturing.completed_orders || 0}</span>
                            </div>
                            <div class="stat-row">
                                <span>In Progress:</span>
                                <span>${manufacturing.in_progress || 0}</span>
                            </div>
                            <div class="stat-row">
                                <span>Production Rate:</span>
                                <span>${manufacturing.efficiency || 85}%</span>
                            </div>
                        </div>
                    </div>
                </div>

                <div class="top-items-section">
                    <h3><i class="fa fa-star"></i> Top Performing Items</h3>
                    <div class="items-table">
                        <div class="table-header">
                            <span>Item Code</span>
                            <span>Item Name</span>
                            <span>Stock Qty</span>
                            <span>Value</span>
                        </div>
                        ${(items.top_items || []).slice(0, 10).map(item => `
                            <div class="table-row">
                                <span class="item-code">${item.item_code}</span>
                                <span>${item.item_name}</span>
                                <span>${item.stock_qty || 0}</span>
                                <span>$${this.formatCurrency(item.stock_value || 0)}</span>
                            </div>
                        `).join('') || '<div class="no-data">No inventory data available</div>'}
                    </div>
                </div>
            </div>
        `);
    }

    render_risk_management_dashboard(content) {
        content.html(`
            <div class="risk-dashboard">
                <div class="dashboard-header">
                    <h1><i class="fa fa-shield"></i> AI Risk Management Center</h1>
                    <p>Comprehensive financial risk assessment, monitoring, and mitigation</p>
                </div>

                <div class="risk-actions-bar">
                    <button class="btn btn-primary" id="run-risk-scan">
                        <i class="fa fa-search"></i> Run Risk Scan
                    </button>
                    <button class="btn btn-info" id="create-assessment">
                        <i class="fa fa-plus"></i> New Assessment
                    </button>
                    <button class="btn btn-warning" id="schedule-monitoring">
                        <i class="fa fa-clock-o"></i> Setup Monitoring
                    </button>
                    <button class="btn btn-success" id="generate-risk-report">
                        <i class="fa fa-file-text"></i> Generate Report
                    </button>
                </div>

                <div class="risk-metrics-grid" id="risk-metrics">
                    <div class="loading-state">
                        <i class="fa fa-spinner fa-spin"></i> Loading risk data...
                    </div>
                </div>

                <div class="risk-content-grid">
                    <div class="risk-alerts-section">
                        <h3><i class="fa fa-exclamation-triangle"></i> Active Risk Alerts</h3>
                        <div class="risk-alerts-list" id="risk-alerts">
                            <!-- Risk alerts will be loaded here -->
                        </div>
                    </div>

                    <div class="recent-assessments-section">
                        <h3><i class="fa fa-history"></i> Recent Assessments</h3>
                        <div class="assessments-list" id="recent-assessments">
                            <!-- Recent assessments will be loaded here -->
                        </div>
                    </div>
                </div>

                <div class="risk-analysis-section">
                    <h3><i class="fa fa-chart-line"></i> Risk Analysis Dashboard</h3>
                    <div class="risk-charts-grid">
                        <div class="risk-chart-container">
                            <h4>Risk Level Distribution</h4>
                            <canvas id="risk-level-chart" width="300" height="200"></canvas>
                        </div>
                        
                        <div class="risk-chart-container">
                            <h4>Risk Trends Over Time</h4>
                            <canvas id="risk-trend-chart" width="300" height="200"></canvas>
                        </div>
                    </div>
                </div>
            </div>
        `);

        this.setup_risk_management_events();
        this.load_risk_dashboard_data();
    }

    setup_risk_management_events() {
        // Run automated risk scan
        $('#run-risk-scan').on('click', () => {
            this.run_automated_risk_scan();
        });

        // Create new assessment
        $('#create-assessment').on('click', () => {
            this.create_new_risk_assessment();
        });

        // Setup monitoring
        $('#schedule-monitoring').on('click', () => {
            this.setup_risk_monitoring();
        });

        // Generate risk report
        $('#generate-risk-report').on('click', () => {
            this.generate_comprehensive_risk_report();
        });
    }

    load_risk_dashboard_data() {
        frappe.call({
            method: 'vacker_automation.vacker_automation.doctype.ai_risk_manager.ai_risk_manager.get_risk_dashboard_data',
            callback: (r) => {
                if (r.message) {
                    this.render_risk_metrics(r.message);
                    this.render_risk_alerts(r.message.active_alerts || []);
                    this.render_recent_assessments(r.message.recent_assessments || []);
                    this.render_risk_charts(r.message.risk_summary || []);
                }
            }
        });
    }

    render_risk_metrics(data) {
        const risk_summary = data.risk_summary || [];
        const total_assessments = data.total_assessments || 0;
        const active_alerts = data.active_alerts?.length || 0;

        // Calculate overall risk score
        let overall_risk_score = 0;
        if (risk_summary.length > 0) {
            overall_risk_score = Math.round(
                risk_summary.reduce((sum, item) => sum + (item.avg_risk_score || 0), 0) / risk_summary.length
            );
        }

        $('#risk-metrics').html(`
            <div class="risk-metric-card overall-risk">
                <div class="metric-icon"><i class="fa fa-shield"></i></div>
                <div class="metric-content">
                    <h3>Overall Risk Score</h3>
                    <div class="metric-value risk-score-${overall_risk_score > 70 ? 'high' : overall_risk_score > 40 ? 'medium' : 'low'}">
                        ${overall_risk_score}/100
                    </div>
                    <div class="metric-label">${this.getRiskLevelText(overall_risk_score)}</div>
                </div>
            </div>
            
            <div class="risk-metric-card">
                <div class="metric-icon"><i class="fa fa-file-text"></i></div>
                <div class="metric-content">
                    <h3>Total Assessments</h3>
                    <div class="metric-value">${total_assessments}</div>
                    <div class="metric-label">Risk evaluations</div>
                </div>
            </div>
            
            <div class="risk-metric-card">
                <div class="metric-icon"><i class="fa fa-bell"></i></div>
                <div class="metric-content">
                    <h3>Active Alerts</h3>
                    <div class="metric-value alert-count">${active_alerts}</div>
                    <div class="metric-label">Requiring attention</div>
                </div>
            </div>
            
            <div class="risk-metric-card">
                <div class="metric-icon"><i class="fa fa-clock-o"></i></div>
                <div class="metric-content">
                    <h3>Last Scan</h3>
                    <div class="metric-value">2h ago</div>
                    <div class="metric-label">Automated monitoring</div>
                </div>
            </div>
        `);
    }

    render_risk_alerts(alerts) {
        const alertsList = $('#risk-alerts');
        
        if (!alerts.length) {
            alertsList.html(`
                <div class="no-alerts">
                    <i class="fa fa-check-circle"></i>
                    <h4>No Active Risk Alerts</h4>
                    <p>All systems operating within acceptable risk parameters</p>
                </div>
            `);
            return;
        }

        const alertsHtml = alerts.map(alert => {
            // Safely escape the alert name to prevent any issues
            const safeAlertName = (alert.name || '').replace(/"/g, '&quot;').replace(/'/g, '&#39;');
            const safeAssessmentName = (alert.risk_assessment_name || '').replace(/"/g, '&quot;').replace(/'/g, '&#39;');
            const safeRiskLevel = (alert.risk_level || '').toLowerCase();
            
            return `
                <div class="risk-alert-item ${safeRiskLevel}">
                    <div class="alert-header">
                        <span class="alert-title">${safeAssessmentName}</span>
                        <span class="alert-level ${safeRiskLevel}">${alert.risk_level}</span>
                    </div>
                    <div class="alert-meta">
                        <span class="alert-date">${frappe.datetime.str_to_user(alert.follow_up_date)}</span>
                        <button class="btn btn-sm btn-outline-primary view-risk-details-btn" data-alert-name="${safeAlertName}">
                            View Details
                        </button>
                    </div>
                </div>
            `;
        }).join('');

        alertsList.html(alertsHtml);
        
        // Add event listeners for view details buttons
        $('.view-risk-details-btn').on('click', (e) => {
            const alertName = $(e.currentTarget).data('alert-name');
            this.view_risk_details(alertName);
        });
    }

    render_recent_assessments(assessments) {
        const assessmentsList = $('#recent-assessments');
        
        if (!assessments.length) {
            assessmentsList.html(`
                <div class="no-assessments">
                    <i class="fa fa-info-circle"></i>
                    <h4>No Recent Assessments</h4>
                    <p>Run your first risk assessment to get started</p>
                    <button class="btn btn-primary btn-sm" id="create-new-assessment-btn">
                        Create Assessment
                    </button>
                </div>
            `);
            
            // Add event listener for create assessment button
            $('#create-new-assessment-btn').on('click', () => {
                this.create_new_risk_assessment();
            });
            
            return;
        }

        const assessmentsHtml = assessments.map(assessment => `
            <div class="assessment-item">
                <div class="assessment-header">
                    <span class="assessment-name">${assessment.risk_assessment_name}</span>
                    <span class="risk-badge ${assessment.risk_level.toLowerCase()}">${assessment.risk_level}</span>
                </div>
                <div class="assessment-meta">
                    <span class="assessment-date">${frappe.datetime.str_to_user(assessment.assessment_date)}</span>
                    <span class="assessment-status ${assessment.status.toLowerCase()}">${assessment.status}</span>
                </div>
            </div>
        `).join('');

        assessmentsList.html(assessmentsHtml);
    }

    render_risk_charts(risk_summary) {
        setTimeout(() => {
            // Risk Level Distribution Chart
            const riskLevelCtx = document.getElementById('risk-level-chart');
            if (riskLevelCtx && risk_summary.length) {
                new Chart(riskLevelCtx, {
                    type: 'doughnut',
                    data: {
                        labels: risk_summary.map(item => item.risk_level),
                        datasets: [{
                            data: risk_summary.map(item => item.count),
                            backgroundColor: ['#ef4444', '#f59e0b', '#3b82f6', '#10b981']
                        }]
                    },
                    options: {
                        responsive: true,
                        plugins: {
                            legend: { position: 'bottom' }
                        }
                    }
                });
            }

            // Risk Trend Chart (placeholder data)
            const riskTrendCtx = document.getElementById('risk-trend-chart');
            if (riskTrendCtx) {
                const months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun'];
                const riskScores = [25, 30, 18, 45, 32, 28];

                new Chart(riskTrendCtx, {
                    type: 'line',
                    data: {
                        labels: months,
                        datasets: [{
                            label: 'Average Risk Score',
                            data: riskScores,
                            borderColor: '#ef4444',
                            backgroundColor: 'rgba(239, 68, 68, 0.1)',
                            fill: true,
                            tension: 0.4
                        }]
                    },
                    options: {
                        responsive: true,
                        scales: {
                            y: {
                                beginAtZero: true,
                                max: 100
                            }
                        }
                    }
                });
            }
        }, 100);
    }

    run_automated_risk_scan() {
        frappe.show_alert('🔍 Running automated risk scan...', 5);
        
        frappe.call({
            method: 'vacker_automation.vacker_automation.doctype.ai_risk_manager.ai_risk_manager.run_automated_risk_scan',
            callback: (r) => {
                if (r.message && r.message.success) {
                    frappe.show_alert({
                        message: `Risk scan completed. Risk Level: ${r.message.risk_level}`,
                        indicator: r.message.risk_level === 'Critical' ? 'red' : r.message.risk_level === 'High' ? 'orange' : 'green'
                    }, 5);
                    
                    // Refresh the dashboard
                    this.load_risk_dashboard_data();
                    
                    // Show findings if critical
                    if (r.message.risk_level === 'Critical') {
                        frappe.msgprint({
                            title: '🚨 Critical Risk Detected',
                            message: r.message.critical_findings,
                            indicator: 'red'
                        });
                    }
                } else {
                    frappe.show_alert('Risk scan failed. Please try again.', 5);
                }
            }
        });
    }

    create_new_risk_assessment() {
        frappe.prompt([
            {
                fieldtype: 'Data',
                label: 'Assessment Name',
                fieldname: 'assessment_name',
                reqd: 1,
                default: `Risk Assessment - ${frappe.datetime.get_today()}`
            }
        ], (values) => {
            frappe.call({
                method: 'vacker_automation.vacker_automation.doctype.ai_risk_manager.ai_risk_manager.create_risk_assessment',
                args: {
                    assessment_name: values.assessment_name
                },
                callback: (r) => {
                    if (r.message && r.message.success) {
                        frappe.show_alert('✅ Risk assessment created successfully!', 5);
                        this.load_risk_dashboard_data();
                    } else {
                        frappe.show_alert('Failed to create risk assessment', 5);
                    }
                }
            });
        }, 'Create Risk Assessment', 'Create');
    }

    setup_risk_monitoring() {
        frappe.call({
            method: 'vacker_automation.vacker_automation.doctype.ai_risk_manager.ai_risk_manager.setup_risk_monitoring_schedule',
            callback: (r) => {
                if (r.message && r.message.success) {
                    frappe.show_alert('✅ Risk monitoring schedule setup complete!', 5);
                } else {
                    frappe.show_alert('Failed to setup monitoring schedule', 5);
                }
            }
        });
    }

    generate_comprehensive_risk_report() {
        frappe.show_alert('📊 Generating comprehensive risk report...', 5);
        
        // Create AI-powered risk report
        const reportPrompt = "Generate a comprehensive financial risk management report based on our current risk assessments, including executive summary, detailed analysis, and strategic recommendations.";
        
        frappe.call({
            method: 'vacker_automation.vacker_automation.doctype.ai_settings.ai_settings.chat_with_ai',
            args: {
                message: reportPrompt,
                context_data: JSON.stringify(this.data),
                thinking_mode: true
            },
            callback: (r) => {
                if (r.message && r.message.success) {
                    // Show the report in a dialog
                    const report_dialog = new frappe.ui.Dialog({
                        title: 'AI-Generated Risk Management Report',
                        fields: [
                            {
                                fieldtype: 'HTML',
                                fieldname: 'report_content'
                            }
                        ],
                        size: 'extra-large'
                    });
                    
                    const formatted_report = r.message.response.replace(/\n/g, '<br>');
                    report_dialog.fields_dict.report_content.$wrapper.html(`
                        <div class="risk-report-content">
                            <div class="report-header">
                                <h2>🛡️ Comprehensive Risk Management Report</h2>
                                <p class="report-date">Generated on: ${frappe.datetime.get_datetime_as_string()}</p>
                            </div>
                            <div class="report-body">
                                ${formatted_report}
                            </div>
                        </div>
                    `);
                    
                    report_dialog.show();
                } else {
                    frappe.show_alert('Failed to generate risk report', 5);
                }
            }
        });
    }

    view_risk_details(assessment_name) {
        frappe.call({
            method: 'vacker_automation.vacker_automation.doctype.ai_risk_manager.ai_risk_manager.get_ai_risk_recommendations',
            args: { risk_assessment_name: assessment_name },
            callback: (r) => {
                if (r.message && !r.message.error) {
                    const details = r.message;
                    
                    const details_dialog = new frappe.ui.Dialog({
                        title: `Risk Assessment Details - ${assessment_name}`,
                        fields: [
                            {
                                fieldtype: 'HTML',
                                fieldname: 'risk_details'
                            }
                        ],
                        size: 'large'
                    });
                    
                    details_dialog.fields_dict.risk_details.$wrapper.html(`
                        <div class="risk-details-content">
                            <div class="risk-level-banner ${details.risk_level.toLowerCase()}">
                                <h3>Risk Level: ${details.risk_level}</h3>
                            </div>
                            
                            <div class="risk-section">
                                <h4>🔍 Key Findings</h4>
                                <p>${details.findings}</p>
                            </div>
                            
                            <div class="risk-section">
                                <h4>💡 AI Recommendations</h4>
                                <p>${details.recommendations}</p>
                            </div>
                            
                            <div class="risk-section">
                                <h4>⚡ Mitigation Actions</h4>
                                <p>${details.mitigation_actions}</p>
                            </div>
                            
                            <div class="risk-section">
                                <h4>📅 Follow-up Date</h4>
                                <p>${frappe.datetime.str_to_user(details.follow_up_date)}</p>
                            </div>
                        </div>
                    `);
                    
                    details_dialog.show();
                }
            }
        });
    }

    getRiskLevelText(score) {
        if (score >= 80) return 'Critical Risk';
        if (score >= 60) return 'High Risk';
        if (score >= 30) return 'Medium Risk';
        return 'Low Risk';
    }

    render_coming_soon(content) {
        const moduleNames = {
            'bank_cash': 'Bank & Cash Management',
            'purchase_orders': 'Purchase Orders',
            'operations': 'Operations Management'
        };

        content.html(`
            <div class="coming-soon-container">
                <div class="coming-soon-content">
                    <div class="coming-soon-icon">
                        <i class="fa fa-rocket"></i>
                    </div>
                    <h2>${moduleNames[this.current_view] || this.current_view.replace('_', ' ').toUpperCase()}</h2>
                    <p>This powerful module is coming soon with advanced analytics and insights!</p>
                    <div class="features-preview">
                        <div class="feature-item">
                            <i class="fa fa-chart-bar"></i>
                            <span>Advanced Analytics</span>
                        </div>
                        <div class="feature-item">
                            <i class="fa fa-dashboard"></i>
                            <span>Real-time Dashboards</span>
                        </div>
                        <div class="feature-item">
                            <i class="fa fa-brain"></i>
                            <span>AI-Powered Insights</span>
                        </div>
                    </div>
                    <p class="suggestion">
                        💡 Meanwhile, try the <strong>AI Assistant</strong> for instant insights about your data!
                    </p>
                    <button class="btn-switch-ai" id="switch-to-ai-btn">
                        <i class="fa fa-robot"></i> Chat with AI Assistant
                    </button>
                </div>
            </div>
        `);

        // Add event listener for the AI switch button
        $('#switch-to-ai-btn').on('click', () => {
            this.switch_view('ai_assistant');
        });
    }

    render_ai_assistant(content) {
        content.html(`
            <div class="ai-chat-interface">
                <div class="chat-container">
                    <div class="chat-messages" id="chat-messages">
                        ${this.current_session ? '' : this.get_welcome_message()}
                    </div>
                    
                    <div class="chat-input-area">
                        <div class="chat-features">
                            <button class="feature-btn" id="thinking-mode-toggle" title="Thinking Mode">
                                <i class="fa fa-brain"></i>
                            </button>
                            <button class="feature-btn" id="web-search-toggle" title="Web Search">
                                <i class="fa fa-search"></i>
                            </button>
                            <button class="feature-btn" id="document-upload" title="Upload Document">
                                <i class="fa fa-paperclip"></i>
                            </button>
                        </div>
                        
                        <div class="input-container">
                            <textarea id="chat-input" placeholder="Message AI Assistant..." rows="1"></textarea>
                            <button class="send-btn" id="send-message">
                                <i class="fa fa-paper-plane"></i>
                            </button>
                        </div>
                        
                        <div class="quick-actions">
                            <button class="quick-btn" data-message="Analyze current dashboard data">
                                📊 Analyze Data
                            </button>
                            <button class="quick-btn" data-message="Generate a comprehensive business report">
                                📋 Generate Report
                            </button>
                            <button class="quick-btn" data-message="What are the key insights from our performance?">
                                💡 Key Insights
                            </button>
                        </div>
                    </div>
                </div>
                
                <input type="file" id="file-upload" multiple style="display: none;" accept=".pdf,.doc,.docx,.txt,.csv,.xlsx">
            </div>
        `);

        this.setup_ai_chat_events();
    }

    get_welcome_message() {
        return `
            <div class="welcome-container">
                <div class="ai-avatar">
                    <i class="fa fa-robot"></i>
                </div>
                <div class="welcome-content">
                    <h2>👋 Welcome to AI Business Intelligence</h2>
                    <p>I'm your advanced AI assistant with powerful capabilities:</p>
                    <div class="capabilities-grid">
                        <div class="capability">
                            <i class="fa fa-brain"></i>
                            <span>Advanced Reasoning</span>
                        </div>
                        <div class="capability">
                            <i class="fa fa-search"></i>
                            <span>Web Research</span>
                        </div>
                        <div class="capability">
                            <i class="fa fa-file-text"></i>
                            <span>Document Analysis</span>
                        </div>
                        <div class="capability">
                            <i class="fa fa-chart-line"></i>
                            <span>Data Insights</span>
                        </div>
                    </div>
                    <p>Ask me anything about your business data, request analysis, or start a conversation!</p>
                </div>
            </div>
        `;
    }

    setup_ai_chat_events() {
        // Auto-resize textarea
        $('#chat-input').on('input', function() {
            this.style.height = 'auto';
            this.style.height = Math.min(this.scrollHeight, 120) + 'px';
        });

        // Send on Enter (Shift+Enter for new line)
        $('#chat-input').on('keydown', (e) => {
            if (e.key === 'Enter' && !e.shiftKey) {
                e.preventDefault();
                this.send_message();
            }
        });

        // Send button
        $('#send-message').on('click', () => {
            this.send_message();
        });

        // Feature toggles
        $('#thinking-mode-toggle').on('click', function() {
            $(this).toggleClass('active');
        });

        $('#web-search-toggle').on('click', function() {
            $(this).toggleClass('active');
        });

        $('#document-upload').on('click', () => {
            $('#file-upload').click();
        });

        // Quick actions
        $('.quick-btn').on('click', (e) => {
            const message = $(e.target).data('message');
            $('#chat-input').val(message);
            this.send_message();
        });

        // File upload
        $('#file-upload').on('change', (e) => {
            this.handle_file_upload(e.target.files);
        });
    }

    send_message() {
        const input = $('#chat-input');
        const message = input.val().trim();
        
        if (!message) return;

        const thinking_mode = $('#thinking-mode-toggle').hasClass('active');
        const web_search = $('#web-search-toggle').hasClass('active');

        // Clear input and reset height
        input.val('').css('height', 'auto');

        // Add user message to UI
        this.add_message_to_ui('user', message);

        // Show typing indicator
        this.show_typing_indicator();

        // Send to AI
        frappe.call({
            method: 'vacker_automation.vacker_automation.doctype.ai_settings.ai_settings.chat_with_ai',
            args: {
                message: message,
                context_data: JSON.stringify(this.data),
                chat_session: this.current_session,
                thinking_mode: thinking_mode,
                enable_web_search: web_search,
                date_range: this.filters
            },
            callback: (r) => {
                this.hide_typing_indicator();
                
                if (r.message && r.message.success) {
                    this.current_session = r.message.chat_session;
                    
                    let response_text = r.message.response;
                    if (thinking_mode && r.message.thinking) {
                        response_text = `🧠 **Thinking Process:**\n\n${r.message.thinking}\n\n📝 **Response:**\n\n${response_text}`;
                    }
                    
                    this.add_message_to_ui('ai', response_text);
                    this.load_chat_sessions(); // Refresh sessions
                } else {
                    this.add_message_to_ui('ai', r.message?.error || 'Sorry, I encountered an error. Please try again.');
                }
            }
        });
    }

    add_message_to_ui(sender, content, timestamp = null, thinking_content = null) {
        const messages = $('#chat-messages');
        if (!messages.length) {
            console.warn('Chat messages container not found');
            return;
        }
        
        const isUser = sender === 'user';
        const time = timestamp ? frappe.datetime.str_to_user(timestamp) : frappe.datetime.get_time(frappe.datetime.now_datetime());
        
        // Safely format the message content
        const formattedContent = this.format_message(content || '');
        const safeTime = (time || '').replace(/"/g, '&quot;').replace(/'/g, '&#39;');
        
        const messageHtml = `
            <div class="chat-message ${isUser ? 'user-message' : 'ai-message'}">
                <div class="message-avatar">
                    <i class="fa ${isUser ? 'fa-user' : 'fa-robot'}"></i>
                </div>
                <div class="message-content">
                    <div class="message-text">${formattedContent}</div>
                    <div class="message-time">${safeTime}</div>
                </div>
            </div>
        `;
        
        try {
            messages.append(messageHtml);
            messages.scrollTop(messages[0].scrollHeight);
        } catch (error) {
            console.error('Error appending message to UI:', error);
            console.error('Problematic HTML:', messageHtml);
        }
    }

    format_message(content) {
        if (!content || typeof content !== 'string') {
            return '';
        }
        
        // First escape HTML to prevent XSS and parsing errors
        const escaped = content
            .replace(/&/g, '&amp;')
            .replace(/</g, '&lt;')
            .replace(/>/g, '&gt;')
            .replace(/"/g, '&quot;')
            .replace(/'/g, '&#39;');
        
        // Then apply markdown-like formatting
        return escaped
            .replace(/\*\*(.*?)\*\*/g, '<strong>$1</strong>')
            .replace(/\*(.*?)\*/g, '<em>$1</em>')
            .replace(/```(.*?)```/gs, '<pre><code>$1</code></pre>')
            .replace(/`(.*?)`/g, '<code>$1</code>')
            .replace(/\n/g, '<br>');
    }

    show_typing_indicator() {
        const messages = $('#chat-messages');
        messages.append(`
            <div class="chat-message ai-message typing-indicator" id="typing-indicator">
                <div class="message-avatar">
                    <i class="fa fa-robot"></i>
                </div>
                <div class="message-content">
                    <div class="typing-animation">
                        <span></span>
                        <span></span>
                        <span></span>
                    </div>
                </div>
            </div>
        `);
        messages.scrollTop(messages[0].scrollHeight);
    }

    hide_typing_indicator() {
        $('#typing-indicator').remove();
    }

    handle_file_upload(files) {
        if (!files.length) return;
        
        frappe.show_alert(`📎 ${files.length} file(s) uploaded for analysis`, 3);
        
        const fileList = Array.from(files).map(file => file.name).join(', ');
        this.add_message_to_ui('user', `📎 **Uploaded Files:** ${fileList}\n\nPlease analyze these documents.`);
    }

    format_time_ago(datetime) {
        const now = new Date();
        const time = new Date(datetime);
        const diff = Math.floor((now - time) / 1000);

        if (diff < 60) return 'Just now';
        if (diff < 3600) return `${Math.floor(diff / 60)}m ago`;
        if (diff < 86400) return `${Math.floor(diff / 3600)}h ago`;
        if (diff < 604800) return `${Math.floor(diff / 86400)}d ago`;
        return frappe.datetime.str_to_user(datetime);
    }

    render_overview(content) {
        if (!this.data || !this.data.financial_summary) {
            content.html('<div class="loading-state"><i class="fa fa-spinner fa-spin"></i> Loading dashboard data...</div>');
            return;
        }

        const financial = this.data.financial_summary;
        const projects = this.data.project_overview;
        const sales = this.data.sales_overview;
        const kpis = this.data.kpi_dashboard;

        content.html(`
            <div class="executive-overview">
                <div class="overview-header">
                    <h1><i class="fa fa-dashboard"></i> Executive Overview</h1>
                    <p>Comprehensive business intelligence at a glance</p>
                </div>

                <!-- KPI Cards -->
                <div class="kpi-grid">
                    <div class="kpi-card revenue">
                        <div class="kpi-icon"><i class="fa fa-money"></i></div>
                        <div class="kpi-content">
                            <h3>Total Revenue</h3>
                            <div class="kpi-value">$${this.formatCurrency(financial.total_revenue || 0)}</div>
                            <div class="kpi-change">+12.5% from last period</div>
                        </div>
                    </div>
                    
                    <div class="kpi-card profit">
                        <div class="kpi-icon"><i class="fa fa-line-chart"></i></div>
                        <div class="kpi-content">
                            <h3>Net Profit</h3>
                            <div class="kpi-value">$${this.formatCurrency(financial.net_profit || 0)}</div>
                            <div class="kpi-change">${financial.profit_margin || 0}% margin</div>
                        </div>
                    </div>
                    
                    <div class="kpi-card projects">
                        <div class="kpi-icon"><i class="fa fa-tasks"></i></div>
                        <div class="kpi-content">
                            <h3>Active Projects</h3>
                            <div class="kpi-value">${projects?.performance_metrics?.total_projects || 0}</div>
                            <div class="kpi-change">${projects?.performance_metrics?.avg_completion || 0}% avg completion</div>
                        </div>
                    </div>
                    
                    <div class="kpi-card customers">
                        <div class="kpi-icon"><i class="fa fa-users"></i></div>
                        <div class="kpi-content">
                            <h3>Customers</h3>
                            <div class="kpi-value">${sales?.sales_summary?.unique_customers || 0}</div>
                            <div class="kpi-change">Active this period</div>
                        </div>
                    </div>
                </div>

                <!-- Charts Section -->
                <div class="charts-section">
                    <div class="chart-container">
                        <h3>Revenue vs Expenses</h3>
                        <canvas id="revenue-expense-chart" width="400" height="200"></canvas>
                    </div>
                    
                    <div class="chart-container">
                        <h3>Project Status Distribution</h3>
                        <canvas id="project-status-chart" width="400" height="200"></canvas>
                    </div>
                </div>

                <!-- Recent Activities -->
                <div class="recent-activities">
                    <h3><i class="fa fa-clock-o"></i> Recent Activities</h3>
                    <div class="activity-list">
                        <div class="activity-item">
                            <i class="fa fa-file-text-o"></i>
                            <span>New sales invoice created - $${this.formatCurrency(25000)}</span>
                            <small>2 hours ago</small>
                        </div>
                        <div class="activity-item">
                            <i class="fa fa-check-circle"></i>
                            <span>Project milestone completed</span>
                            <small>4 hours ago</small>
                        </div>
                        <div class="activity-item">
                            <i class="fa fa-shopping-cart"></i>
                            <span>Purchase order approved</span>
                            <small>6 hours ago</small>
                        </div>
                    </div>
                </div>
            </div>
        `);

        this.render_overview_charts();
    }

    render_financial_dashboard(content) {
        if (!this.data || !this.data.financial_summary) {
            content.html('<div class="loading-state"><i class="fa fa-spinner fa-spin"></i> Loading financial data...</div>');
            return;
        }

        const financial = this.data.financial_summary;
        const gl = this.data.gl_overview;
        const cashflow = this.data.cashflow_data;

        content.html(`
            <div class="financial-dashboard">
                <div class="dashboard-header">
                    <h1><i class="fa fa-money"></i> Financial Analytics</h1>
                    <p>Comprehensive financial performance and analysis</p>
                </div>

                <!-- Financial Summary Cards -->
                <div class="financial-summary">
                    <div class="summary-card">
                        <h4>Total Revenue</h4>
                        <div class="amount">$${this.formatCurrency(financial.total_revenue || 0)}</div>
                        <div class="transactions">${financial.revenue_transactions || 0} transactions</div>
                    </div>
                    
                    <div class="summary-card">
                        <h4>Total Expenses</h4>
                        <div class="amount expense">$${this.formatCurrency(financial.total_expenses || 0)}</div>
                        <div class="transactions">${financial.expense_transactions || 0} transactions</div>
                    </div>
                    
                    <div class="summary-card">
                        <h4>Net Profit</h4>
                        <div class="amount ${financial.net_profit >= 0 ? 'profit' : 'loss'}">
                            $${this.formatCurrency(financial.net_profit || 0)}
                        </div>
                        <div class="margin">${financial.profit_margin || 0}% margin</div>
                    </div>
                    
                    <div class="summary-card">
                        <h4>Total Assets</h4>
                        <div class="amount">$${this.formatCurrency(financial.total_assets || 0)}</div>
                        <div class="equity">Equity: $${this.formatCurrency(financial.total_equity || 0)}</div>
                    </div>
                </div>

                <!-- Charts Section -->
                <div class="financial-charts">
                    <div class="chart-row">
                        <div class="chart-container">
                            <h3>Revenue Trend</h3>
                            <canvas id="revenue-trend-chart" width="400" height="200"></canvas>
                        </div>
                        
                        <div class="chart-container">
                            <h3>Expense Breakdown</h3>
                            <canvas id="expense-breakdown-chart" width="400" height="200"></canvas>
                        </div>
                    </div>
                </div>

                <!-- Top Accounts -->
                <div class="top-accounts">
                    <div class="accounts-section">
                        <h3>Top Revenue Accounts</h3>
                        <div class="accounts-list">
                            ${gl?.top_revenue_accounts?.slice(0, 5).map(account => `
                                <div class="account-item">
                                    <span class="account-name">${account.account_name}</span>
                                    <span class="account-amount">$${this.formatCurrency(account.total_credit)}</span>
                                </div>
                            `).join('') || '<p>No data available</p>'}
                        </div>
                    </div>
                    
                    <div class="accounts-section">
                        <h3>Top Expense Accounts</h3>
                        <div class="accounts-list">
                            ${gl?.top_expense_accounts?.slice(0, 5).map(account => `
                                <div class="account-item">
                                    <span class="account-name">${account.account_name}</span>
                                    <span class="account-amount">$${this.formatCurrency(account.total_debit)}</span>
                                </div>
                            `).join('') || '<p>No data available</p>'}
                        </div>
                    </div>
                </div>
            </div>
        `);

        this.render_financial_charts();
    }

    render_projects_dashboard(content) {
        if (!this.data || !this.data.project_overview) {
            content.html('<div class="loading-state"><i class="fa fa-spinner fa-spin"></i> Loading projects data...</div>');
            return;
        }

        const projects = this.data.project_overview;
        const metrics = projects.performance_metrics || {};

        content.html(`
            <div class="projects-dashboard">
                <div class="dashboard-header">
                    <h1><i class="fa fa-tasks"></i> Projects Dashboard</h1>
                    <p>Project performance and management insights</p>
                </div>

                <!-- Project Metrics -->
                <div class="project-metrics">
                    <div class="metric-card">
                        <div class="metric-icon"><i class="fa fa-briefcase"></i></div>
                        <div class="metric-value">${metrics.total_projects || 0}</div>
                        <div class="metric-label">Total Projects</div>
                    </div>
                    
                    <div class="metric-card">
                        <div class="metric-icon"><i class="fa fa-check-circle"></i></div>
                        <div class="metric-value">${metrics.completed_projects || 0}</div>
                        <div class="metric-label">Completed</div>
                    </div>
                    
                    <div class="metric-card">
                        <div class="metric-icon"><i class="fa fa-clock-o"></i></div>
                        <div class="metric-value">${metrics.overdue_projects || 0}</div>
                        <div class="metric-label">Overdue</div>
                    </div>
                    
                    <div class="metric-card">
                        <div class="metric-icon"><i class="fa fa-percent"></i></div>
                        <div class="metric-value">${Math.round(metrics.avg_completion || 0)}%</div>
                        <div class="metric-label">Avg Completion</div>
                    </div>
                </div>

                <!-- Charts and Status -->
                <div class="project-charts">
                    <div class="chart-container">
                        <h3>Project Status Distribution</h3>
                        <canvas id="project-status-pie-chart" width="300" height="200"></canvas>
                    </div>
                    
                    <div class="status-list">
                        <h3>Project Status Summary</h3>
                        ${projects.project_status?.map(status => `
                            <div class="status-item">
                                <span class="status-name">${status.status}</span>
                                <span class="status-count">${status.count} projects</span>
                                <span class="status-value">$${this.formatCurrency(status.total_value || 0)}</span>
                            </div>
                        `).join('') || '<p>No status data available</p>'}
                    </div>
                </div>

                <!-- Critical Projects -->
                <div class="critical-projects">
                    <h3><i class="fa fa-exclamation-triangle"></i> Critical Projects</h3>
                    <div class="projects-table">
                        <div class="table-header">
                            <span>Project</span>
                            <span>Customer</span>
                            <span>Status</span>
                            <span>Completion</span>
                            <span>Due Date</span>
                            <span>Value</span>
                        </div>
                        ${projects.critical_projects?.slice(0, 10).map(project => `
                            <div class="table-row ${project.days_overdue > 0 ? 'overdue' : ''}">
                                <span class="project-name" title="${project.project_name}">${project.project_name}</span>
                                <span>${project.customer || '-'}</span>
                                <span class="status ${project.status.toLowerCase().replace(' ', '-')}">${project.status}</span>
                                <span>${project.percent_complete || 0}%</span>
                                <span>${frappe.datetime.str_to_user(project.expected_end_date)}</span>
                                <span>$${this.formatCurrency(project.total_sales_amount || 0)}</span>
                            </div>
                        `).join('') || '<div class="no-data">No critical projects found</div>'}
                    </div>
                </div>
            </div>
        `);

        this.render_project_charts();
    }

    render_materials_dashboard(content) {
        if (!this.data || !this.data.material_requests) {
            content.html('<div class="loading-state"><i class="fa fa-spinner fa-spin"></i> Loading materials data...</div>');
            return;
        }

        const materials = this.data.material_requests;
        const requests = materials.recent_requests || [];
        const statuses = materials.status_summary || [];

        content.html(`
            <div class="materials-dashboard">
                <div class="dashboard-header">
                    <h1><i class="fa fa-cubes"></i> Material Requests Dashboard</h1>
                    <p>Material request tracking and procurement insights</p>
                </div>

                <div class="material-status-cards">
                    ${statuses.map(status => `
                        <div class="status-card">
                            <h4>${status.status}</h4>
                            <div class="count">${status.count}</div>
                            <div class="value">$${this.formatCurrency(status.total_value || 0)}</div>
                        </div>
                    `).join('')}
                </div>

                <div class="recent-requests">
                    <h3><i class="fa fa-clock-o"></i> Recent Material Requests</h3>
                    <div class="requests-table">
                        <div class="table-header">
                            <span>Request ID</span>
                            <span>Date</span>
                            <span>Status</span>
                            <span>Items</span>
                            <span>Value</span>
                        </div>
                        ${requests.slice(0, 15).map(request => `
                            <div class="table-row">
                                <span class="request-id">${request.name}</span>
                                <span>${frappe.datetime.str_to_user(request.transaction_date)}</span>
                                <span class="status ${request.status.toLowerCase().replace(' ', '-')}">${request.status}</span>
                                <span>${request.items_count}</span>
                                <span>$${this.formatCurrency(request.total_value || 0)}</span>
                            </div>
                        `).join('') || '<div class="no-data">No material requests found</div>'}
                    </div>
                </div>
            </div>
        `);
    }

    render_hr_dashboard(content) {
        if (!this.data || !this.data.hr_summary) {
            content.html('<div class="loading-state"><i class="fa fa-spinner fa-spin"></i> Loading HR data...</div>');
            return;
        }

        const hr = this.data.hr_summary;
        const summary = hr.employee_summary?.[0] || {};
        const departments = hr.department_wise || [];
        const payroll = this.data.payroll_detailed || {};
        const workforce = this.data.workforce_analytics || {};

        content.html(`
            <div class="hr-dashboard">
                <div class="dashboard-header">
                    <h1><i class="fa fa-users"></i> HR & Workforce Dashboard</h1>
                    <p>Human resources and workforce analytics</p>
                </div>

                <div class="hr-metrics">
                    <div class="metric-card">
                        <div class="metric-icon"><i class="fa fa-users"></i></div>
                        <div class="metric-value">${summary.total_employees || 0}</div>
                        <div class="metric-label">Total Employees</div>
                    </div>
                    
                    <div class="metric-card">
                        <div class="metric-icon"><i class="fa fa-check-circle"></i></div>
                        <div class="metric-value">${summary.active_employees || 0}</div>
                        <div class="metric-label">Active Employees</div>
                    </div>
                    
                    <div class="metric-card">
                        <div class="metric-icon"><i class="fa fa-money"></i></div>
                        <div class="metric-value">$${this.formatCurrency(payroll.total_payroll || 0)}</div>
                        <div class="metric-label">Total Payroll</div>
                    </div>
                    
                    <div class="metric-card">
                        <div class="metric-icon"><i class="fa fa-percent"></i></div>
                        <div class="metric-value">${Math.round(workforce.retention_rate || 95)}%</div>
                        <div class="metric-label">Retention Rate</div>
                    </div>
                </div>

                <div class="hr-content-grid">
                    <div class="departments-section">
                        <h3><i class="fa fa-sitemap"></i> Department Distribution</h3>
                        <div class="departments-grid">
                            ${departments.slice(0, 8).map(dept => `
                                <div class="department-card">
                                    <h4>${dept.department || 'Unknown'}</h4>
                                    <div class="employee-count">${dept.employee_count} employees</div>
                                </div>
                            `).join('') || '<div class="no-data">No department data available</div>'}
                        </div>
                    </div>

                    <div class="payroll-section">
                        <h3><i class="fa fa-money"></i> Payroll Overview</h3>
                        <div class="payroll-stats">
                            <div class="stat-item">
                                <span class="stat-label">This Month</span>
                                <span class="stat-value">$${this.formatCurrency(payroll.current_month || 0)}</span>
                            </div>
                            <div class="stat-item">
                                <span class="stat-label">Last Month</span>
                                <span class="stat-value">$${this.formatCurrency(payroll.previous_month || 0)}</span>
                            </div>
                            <div class="stat-item">
                                <span class="stat-label">YTD Total</span>
                                <span class="stat-value">$${this.formatCurrency(payroll.ytd_total || 0)}</span>
                            </div>
                        </div>
                    </div>
                </div>

                <div class="employee-analytics">
                    <h3><i class="fa fa-chart-line"></i> Employee Analytics</h3>
                    <div class="analytics-grid">
                        <div class="gender-distribution">
                            <h4>Gender Distribution</h4>
                            <canvas id="gender-chart" width="300" height="200"></canvas>
                        </div>
                        <div class="department-chart">
                            <h4>Department Breakdown</h4>
                            <canvas id="department-chart" width="300" height="200"></canvas>
                        </div>
                    </div>
                </div>
            </div>
        `);

        this.render_hr_charts(summary, departments);
    }

    render_bank_cash_dashboard(content) {
        if (!this.data || !this.data.bank_cash_analysis) {
            content.html('<div class="loading-state"><i class="fa fa-spinner fa-spin"></i> Loading bank & cash data...</div>');
            return;
        }

        const bankCash = this.data.bank_cash_analysis;
        const accounts = bankCash.bank_accounts || [];
        const cashflow = this.data.cashflow_data || {};

        content.html(`
            <div class="bank-cash-dashboard">
                <div class="dashboard-header">
                    <h1><i class="fa fa-university"></i> Bank & Cash Management</h1>
                    <p>Banking and cash flow management insights</p>
                </div>

                <div class="cash-metrics">
                    <div class="metric-card">
                        <div class="metric-icon"><i class="fa fa-money"></i></div>
                        <div class="metric-value">$${this.formatCurrency(bankCash.total_cash || 0)}</div>
                        <div class="metric-label">Total Cash</div>
                    </div>
                    
                    <div class="metric-card">
                        <div class="metric-icon"><i class="fa fa-university"></i></div>
                        <div class="metric-value">${accounts.length}</div>
                        <div class="metric-label">Bank Accounts</div>
                    </div>
                    
                    <div class="metric-card">
                        <div class="metric-icon"><i class="fa fa-arrow-up"></i></div>
                        <div class="metric-value">$${this.formatCurrency(cashflow.cash_inflow || 0)}</div>
                        <div class="metric-label">Cash Inflow</div>
                    </div>
                    
                    <div class="metric-card">
                        <div class="metric-icon"><i class="fa fa-arrow-down"></i></div>
                        <div class="metric-value">$${this.formatCurrency(cashflow.cash_outflow || 0)}</div>
                        <div class="metric-label">Cash Outflow</div>
                    </div>
                </div>

                <div class="bank-accounts-section">
                    <h3><i class="fa fa-university"></i> Bank Accounts</h3>
                    <div class="accounts-table">
                        <div class="table-header">
                            <span>Account</span>
                            <span>Bank</span>
                            <span>Balance</span>
                            <span>Status</span>
                        </div>
                        ${accounts.slice(0, 10).map(account => `
                            <div class="table-row">
                                <span class="account-name">${account.account_name}</span>
                                <span>${account.bank || 'N/A'}</span>
                                <span class="balance ${account.balance >= 0 ? 'positive' : 'negative'}">
                                    $${this.formatCurrency(Math.abs(account.balance || 0))}
                                </span>
                                <span class="status active">Active</span>
                            </div>
                        `).join('') || '<div class="no-data">No bank accounts found</div>'}
                    </div>
                </div>

                <div class="cashflow-chart-section">
                    <h3><i class="fa fa-line-chart"></i> Cash Flow Analysis</h3>
                    <div class="chart-container">
                        <canvas id="cashflow-chart" width="800" height="300"></canvas>
                    </div>
                </div>
            </div>
        `);

        this.render_cashflow_chart();
    }

    render_purchase_orders_dashboard(content) {
        if (!this.data || !this.data.purchase_orders_overview) {
            content.html('<div class="loading-state"><i class="fa fa-spinner fa-spin"></i> Loading purchase orders data...</div>');
            return;
        }

        const po = this.data.purchase_orders_overview;
        const orders = po.recent_orders || [];
        const summary = po.summary || {};

        content.html(`
            <div class="purchase-orders-dashboard">
                <div class="dashboard-header">
                    <h1><i class="fa fa-shopping-cart"></i> Purchase Orders Dashboard</h1>
                    <p>Purchase order management and procurement analytics</p>
                </div>

                <div class="po-metrics">
                    <div class="metric-card">
                        <div class="metric-icon"><i class="fa fa-shopping-cart"></i></div>
                        <div class="metric-value">${summary.total_orders || 0}</div>
                        <div class="metric-label">Total Orders</div>
                    </div>
                    
                    <div class="metric-card">
                        <div class="metric-icon"><i class="fa fa-money"></i></div>
                        <div class="metric-value">$${this.formatCurrency(summary.total_value || 0)}</div>
                        <div class="metric-label">Total Value</div>
                    </div>
                    
                    <div class="metric-card">
                        <div class="metric-icon"><i class="fa fa-clock-o"></i></div>
                        <div class="metric-value">${summary.pending_orders || 0}</div>
                        <div class="metric-label">Pending Orders</div>
                    </div>
                    
                    <div class="metric-card">
                        <div class="metric-icon"><i class="fa fa-truck"></i></div>
                        <div class="metric-value">${summary.received_orders || 0}</div>
                        <div class="metric-label">Received Orders</div>
                    </div>
                </div>

                <div class="po-status-section">
                    <h3><i class="fa fa-pie-chart"></i> Order Status Distribution</h3>
                    <div class="status-charts">
                        <canvas id="po-status-chart" width="400" height="300"></canvas>
                    </div>
                </div>

                <div class="recent-po-section">
                    <h3><i class="fa fa-clock-o"></i> Recent Purchase Orders</h3>
                    <div class="po-table">
                        <div class="table-header">
                            <span>PO Number</span>
                            <span>Supplier</span>
                            <span>Date</span>
                            <span>Status</span>
                            <span>Total</span>
                        </div>
                        ${orders.slice(0, 15).map(order => `
                            <div class="table-row">
                                <span class="po-number">${order.name}</span>
                                <span>${order.supplier || 'N/A'}</span>
                                <span>${frappe.datetime.str_to_user(order.transaction_date)}</span>
                                <span class="status ${order.status.toLowerCase().replace(' ', '-')}">${order.status}</span>
                                <span>$${this.formatCurrency(order.grand_total || 0)}</span>
                            </div>
                        `).join('') || '<div class="no-data">No purchase orders found</div>'}
                    </div>
                </div>
            </div>
        `);

        this.render_po_charts();
    }

    render_operations_dashboard(content) {
        const inventory = this.data.inventory_overview || {};
        const manufacturing = this.data.manufacturing_overview || {};
        const items = this.data.items_analysis || {};

        content.html(`
            <div class="operations-dashboard">
                <div class="dashboard-header">
                    <h1><i class="fa fa-cogs"></i> Operations Management</h1>
                    <p>Operational efficiency and performance metrics</p>
                </div>

                <div class="ops-metrics">
                    <div class="metric-card">
                        <div class="metric-icon"><i class="fa fa-cubes"></i></div>
                        <div class="metric-value">${inventory.total_items || 0}</div>
                        <div class="metric-label">Inventory Items</div>
                    </div>
                    
                    <div class="metric-card">
                        <div class="metric-icon"><i class="fa fa-money"></i></div>
                        <div class="metric-value">$${this.formatCurrency(inventory.total_value || 0)}</div>
                        <div class="metric-label">Inventory Value</div>
                    </div>
                    
                    <div class="metric-card">
                        <div class="metric-icon"><i class="fa fa-industry"></i></div>
                        <div class="metric-value">${manufacturing.work_orders || 0}</div>
                        <div class="metric-label">Work Orders</div>
                    </div>
                    
                    <div class="metric-card">
                        <div class="metric-icon"><i class="fa fa-exclamation-triangle"></i></div>
                        <div class="metric-value">${inventory.low_stock_items || 0}</div>
                        <div class="metric-label">Low Stock Items</div>
                    </div>
                </div>

                <div class="ops-content-grid">
                    <div class="inventory-section">
                        <h3><i class="fa fa-boxes"></i> Inventory Overview</h3>
                        <div class="inventory-stats">
                            <div class="stat-row">
                                <span>Total Stock Value:</span>
                                <span>$${this.formatCurrency(inventory.stock_value || 0)}</span>
                            </div>
                            <div class="stat-row">
                                <span>Available Stock:</span>
                                <span>${inventory.available_qty || 0} units</span>
                            </div>
                            <div class="stat-row">
                                <span>Reserved Stock:</span>
                                <span>${inventory.reserved_qty || 0} units</span>
                            </div>
                        </div>
                    </div>

                    <div class="manufacturing-section">
                        <h3><i class="fa fa-industry"></i> Manufacturing</h3>
                        <div class="manufacturing-stats">
                            <div class="stat-row">
                                <span>Completed Orders:</span>
                                <span>${manufacturing.completed_orders || 0}</span>
                            </div>
                            <div class="stat-row">
                                <span>In Progress:</span>
                                <span>${manufacturing.in_progress || 0}</span>
                            </div>
                            <div class="stat-row">
                                <span>Production Rate:</span>
                                <span>${manufacturing.efficiency || 85}%</span>
                            </div>
                        </div>
                    </div>
                </div>

                <div class="top-items-section">
                    <h3><i class="fa fa-star"></i> Top Performing Items</h3>
                    <div class="items-table">
                        <div class="table-header">
                            <span>Item Code</span>
                            <span>Item Name</span>
                            <span>Stock Qty</span>
                            <span>Value</span>
                        </div>
                        ${(items.top_items || []).slice(0, 10).map(item => `
                            <div class="table-row">
                                <span class="item-code">${item.item_code}</span>
                                <span>${item.item_name}</span>
                                <span>${item.stock_qty || 0}</span>
                                <span>$${this.formatCurrency(item.stock_value || 0)}</span>
                            </div>
                        `).join('') || '<div class="no-data">No inventory data available</div>'}
                    </div>
                </div>
            </div>
        `);
    }

    // Module loading and management methods
    async loadModule(moduleName, moduleClass) {
        try {
            // Check if module is already loaded
            if (this.modules[moduleName]) {
                return this.modules[moduleName];
            }

            // Create new module instance
            const module = new moduleClass(this);
            this.modules[moduleName] = module;
            
            return module;
        } catch (error) {
            console.error(`Error loading module ${moduleName}:`, error);
            return null;
        }
    }

    destroyModule(moduleName) {
        if (this.modules[moduleName]) {
            if (typeof this.modules[moduleName].destroy === 'function') {
                this.modules[moduleName].destroy();
            }
            delete this.modules[moduleName];
        }
    }

    destroyAllModules() {
        Object.keys(this.modules).forEach(moduleName => {
            this.destroyModule(moduleName);
        });
    }

    // Enhanced render methods that use the new modular system
    async render_materials_dashboard(content) {
        // Destroy existing module if any
        this.destroyModule('materials');
        
        // Load the materials management module
        const module = await this.loadModule('materials', MaterialsManagementModule);
        if (module) {
            module.render(content);
        } else {
            this.render_fallback_materials(content);
        }
    }

    async render_bank_cash_dashboard(content) {
        // Destroy existing module if any
        this.destroyModule('bank_cash');
        
        // Load the bank & cash management module
        const module = await this.loadModule('bank_cash', BankCashManagementModule);
        if (module) {
            module.render(content);
        } else {
            this.render_fallback_bank_cash(content);
        }
    }

    async render_purchase_orders_dashboard(content) {
        // Destroy existing module if any
        this.destroyModule('purchase_orders');
        
        // Load the purchase orders management module
        const module = await this.loadModule('purchase_orders', PurchaseOrdersManagementModule);
        if (module) {
            module.render(content);
        } else {
            this.render_fallback_purchase_orders(content);
        }
    }

    async render_operations_dashboard(content) {
        // Destroy existing module if any
        this.destroyModule('operations');
        
        // Load the operations management module
        const module = await this.loadModule('operations', OperationsManagementModule);
        if (module) {
            module.render(content);
        } else {
            this.render_fallback_operations(content);
        }
    }

    // Fallback render methods (existing implementations renamed)
    render_fallback_materials(content) {
        if (!this.data || !this.data.material_requests) {
            content.html('<div class="loading-state"><i class="fa fa-spinner fa-spin"></i> Loading materials data...</div>');
            return;
        }

        const materials = this.data.material_requests;
        const requests = materials.recent_requests || [];
        const statuses = materials.status_summary || [];

        content.html(`
            <div class="materials-dashboard">
                <div class="dashboard-header">
                    <h1><i class="fa fa-cubes"></i> Material Requests Dashboard</h1>
                    <p>Material request tracking and procurement insights</p>
                </div>

                <div class="material-status-cards">
                    ${statuses.map(status => `
                        <div class="status-card">
                            <h4>${status.status}</h4>
                            <div class="count">${status.count}</div>
                            <div class="value">$${this.formatCurrency(status.total_value || 0)}</div>
                        </div>
                    `).join('')}
                </div>

                <div class="recent-requests">
                    <h3><i class="fa fa-clock-o"></i> Recent Material Requests</h3>
                    <div class="requests-table">
                        <div class="table-header">
                            <span>Request ID</span>
                            <span>Date</span>
                            <span>Status</span>
                            <span>Items</span>
                            <span>Value</span>
                        </div>
                        ${requests.slice(0, 15).map(request => `
                            <div class="table-row">
                                <span class="request-id">${request.name}</span>
                                <span>${frappe.datetime.str_to_user(request.transaction_date)}</span>
                                <span class="status ${request.status.toLowerCase().replace(' ', '-')}">${request.status}</span>
                                <span>${request.items_count}</span>
                                <span>$${this.formatCurrency(request.total_value || 0)}</span>
                            </div>
                        `).join('') || '<div class="no-data">No material requests found</div>'}
                    </div>
                </div>
            </div>
        `);
    }

    render_fallback_bank_cash(content) {
        if (!this.data || !this.data.bank_cash_analysis) {
            content.html('<div class="loading-state"><i class="fa fa-spinner fa-spin"></i> Loading bank & cash data...</div>');
            return;
        }

        const bankCash = this.data.bank_cash_analysis;
        const accounts = bankCash.bank_accounts || [];
        const cashflow = this.data.cashflow_data || {};

        content.html(`
            <div class="bank-cash-dashboard">
                <div class="dashboard-header">
                    <h1><i class="fa fa-university"></i> Bank & Cash Management</h1>
                    <p>Banking and cash flow management insights</p>
                </div>

                <div class="cash-metrics">
                    <div class="metric-card">
                        <div class="metric-icon"><i class="fa fa-money"></i></div>
                        <div class="metric-value">$${this.formatCurrency(bankCash.total_cash || 0)}</div>
                        <div class="metric-label">Total Cash</div>
                    </div>
                    
                    <div class="metric-card">
                        <div class="metric-icon"><i class="fa fa-university"></i></div>
                        <div class="metric-value">${accounts.length}</div>
                        <div class="metric-label">Bank Accounts</div>
                    </div>
                    
                    <div class="metric-card">
                        <div class="metric-icon"><i class="fa fa-arrow-up"></i></div>
                        <div class="metric-value">$${this.formatCurrency(cashflow.cash_inflow || 0)}</div>
                        <div class="metric-label">Cash Inflow</div>
                    </div>
                    
                    <div class="metric-card">
                        <div class="metric-icon"><i class="fa fa-arrow-down"></i></div>
                        <div class="metric-value">$${this.formatCurrency(cashflow.cash_outflow || 0)}</div>
                        <div class="metric-label">Cash Outflow</div>
                    </div>
                </div>

                <div class="bank-accounts-section">
                    <h3><i class="fa fa-university"></i> Bank Accounts</h3>
                    <div class="accounts-table">
                        <div class="table-header">
                            <span>Account</span>
                            <span>Bank</span>
                            <span>Balance</span>
                            <span>Status</span>
                        </div>
                        ${accounts.slice(0, 10).map(account => `
                            <div class="table-row">
                                <span class="account-name">${account.account_name}</span>
                                <span>${account.bank || 'N/A'}</span>
                                <span class="balance ${account.balance >= 0 ? 'positive' : 'negative'}">
                                    $${this.formatCurrency(Math.abs(account.balance || 0))}
                                </span>
                                <span class="status active">Active</span>
                            </div>
                        `).join('') || '<div class="no-data">No bank accounts found</div>'}
                    </div>
                </div>

                <div class="cashflow-chart-section">
                    <h3><i class="fa fa-line-chart"></i> Cash Flow Analysis</h3>
                    <div class="chart-container">
                        <canvas id="cashflow-chart" width="800" height="300"></canvas>
                    </div>
                </div>
            </div>
        `);

        this.render_cashflow_chart();
    }

    render_fallback_purchase_orders(content) {
        if (!this.data || !this.data.purchase_orders_overview) {
            content.html('<div class="loading-state"><i class="fa fa-spinner fa-spin"></i> Loading purchase orders data...</div>');
            return;
        }

        const po = this.data.purchase_orders_overview;
        const orders = po.recent_orders || [];
        const summary = po.summary || {};

        content.html(`
            <div class="purchase-orders-dashboard">
                <div class="dashboard-header">
                    <h1><i class="fa fa-shopping-cart"></i> Purchase Orders Dashboard</h1>
                    <p>Purchase order management and procurement analytics</p>
                </div>

                <div class="po-metrics">
                    <div class="metric-card">
                        <div class="metric-icon"><i class="fa fa-shopping-cart"></i></div>
                        <div class="metric-value">${summary.total_orders || 0}</div>
                        <div class="metric-label">Total Orders</div>
                    </div>
                    
                    <div class="metric-card">
                        <div class="metric-icon"><i class="fa fa-money"></i></div>
                        <div class="metric-value">$${this.formatCurrency(summary.total_value || 0)}</div>
                        <div class="metric-label">Total Value</div>
                    </div>
                    
                    <div class="metric-card">
                        <div class="metric-icon"><i class="fa fa-clock-o"></i></div>
                        <div class="metric-value">${summary.pending_orders || 0}</div>
                        <div class="metric-label">Pending Orders</div>
                    </div>
                    
                    <div class="metric-card">
                        <div class="metric-icon"><i class="fa fa-truck"></i></div>
                        <div class="metric-value">${summary.received_orders || 0}</div>
                        <div class="metric-label">Received Orders</div>
                    </div>
                </div>

                <div class="po-status-section">
                    <h3><i class="fa fa-pie-chart"></i> Order Status Distribution</h3>
                    <div class="status-charts">
                        <canvas id="po-status-chart" width="400" height="300"></canvas>
                    </div>
                </div>

                <div class="recent-po-section">
                    <h3><i class="fa fa-clock-o"></i> Recent Purchase Orders</h3>
                    <div class="po-table">
                        <div class="table-header">
                            <span>PO Number</span>
                            <span>Supplier</span>
                            <span>Date</span>
                            <span>Status</span>
                            <span>Total</span>
                        </div>
                        ${orders.slice(0, 15).map(order => `
                            <div class="table-row">
                                <span class="po-number">${order.name}</span>
                                <span>${order.supplier || 'N/A'}</span>
                                <span>${frappe.datetime.str_to_user(order.transaction_date)}</span>
                                <span class="status ${order.status.toLowerCase().replace(' ', '-')}">${order.status}</span>
                                <span>$${this.formatCurrency(order.grand_total || 0)}</span>
                            </div>
                        `).join('') || '<div class="no-data">No purchase orders found</div>'}
                    </div>
                </div>
            </div>
        `);

        this.render_po_charts();
    }

    render_fallback_operations(content) {
        const inventory = this.data.inventory_overview || {};
        const manufacturing = this.data.manufacturing_overview || {};
        const items = this.data.items_analysis || {};

        content.html(`
            <div class="operations-dashboard">
                <div class="dashboard-header">
                    <h1><i class="fa fa-cogs"></i> Operations Management</h1>
                    <p>Operational efficiency and performance metrics</p>
                </div>

                <div class="ops-metrics">
                    <div class="metric-card">
                        <div class="metric-icon"><i class="fa fa-cubes"></i></div>
                        <div class="metric-value">${inventory.total_items || 0}</div>
                        <div class="metric-label">Inventory Items</div>
                    </div>
                    
                    <div class="metric-card">
                        <div class="metric-icon"><i class="fa fa-money"></i></div>
                        <div class="metric-value">$${this.formatCurrency(inventory.total_value || 0)}</div>
                        <div class="metric-label">Inventory Value</div>
                    </div>
                    
                    <div class="metric-card">
                        <div class="metric-icon"><i class="fa fa-industry"></i></div>
                        <div class="metric-value">${manufacturing.work_orders || 0}</div>
                        <div class="metric-label">Work Orders</div>
                    </div>
                    
                    <div class="metric-card">
                        <div class="metric-icon"><i class="fa fa-exclamation-triangle"></i></div>
                        <div class="metric-value">${inventory.low_stock_items || 0}</div>
                        <div class="metric-label">Low Stock Items</div>
                    </div>
                </div>

                <div class="ops-content-grid">
                    <div class="inventory-section">
                        <h3><i class="fa fa-boxes"></i> Inventory Overview</h3>
                        <div class="inventory-stats">
                            <div class="stat-row">
                                <span>Total Stock Value:</span>
                                <span>$${this.formatCurrency(inventory.stock_value || 0)}</span>
                            </div>
                            <div class="stat-row">
                                <span>Available Stock:</span>
                                <span>${inventory.available_qty || 0} units</span>
                            </div>
                            <div class="stat-row">
                                <span>Reserved Stock:</span>
                                <span>${inventory.reserved_qty || 0} units</span>
                            </div>
                        </div>
                    </div>

                    <div class="manufacturing-section">
                        <h3><i class="fa fa-industry"></i> Manufacturing</h3>
                        <div class="manufacturing-stats">
                            <div class="stat-row">
                                <span>Completed Orders:</span>
                                <span>${manufacturing.completed_orders || 0}</span>
                            </div>
                            <div class="stat-row">
                                <span>In Progress:</span>
                                <span>${manufacturing.in_progress || 0}</span>
                            </div>
                            <div class="stat-row">
                                <span>Production Rate:</span>
                                <span>${manufacturing.efficiency || 85}%</span>
                            </div>
                        </div>
                    </div>
                </div>

                <div class="top-items-section">
                    <h3><i class="fa fa-star"></i> Top Performing Items</h3>
                    <div class="items-table">
                        <div class="table-header">
                            <span>Item Code</span>
                            <span>Item Name</span>
                            <span>Stock Qty</span>
                            <span>Value</span>
                        </div>
                        ${(items.top_items || []).slice(0, 10).map(item => `
                            <div class="table-row">
                                <span class="item-code">${item.item_code}</span>
                                <span>${item.item_name}</span>
                                <span>${item.stock_qty || 0}</span>
                                <span>$${this.formatCurrency(item.stock_value || 0)}</span>
                            </div>
                        `).join('') || '<div class="no-data">No inventory data available</div>'}
                    </div>
                </div>
            </div>
        `);
    }

    // Helper method for currency formatting
    formatCurrency(amount) {
        if (amount === null || amount === undefined || isNaN(amount)) {
            return '0.00';
        }
        return parseFloat(amount).toLocaleString('en-US', {
            minimumFractionDigits: 2,
            maximumFractionDigits: 2
        });
    }

    // Chart rendering methods
    render_cashflow_chart() {
        // Implementation for cashflow chart
        setTimeout(() => {
            const ctx = document.getElementById('cashflow-chart');
            if (ctx && typeof Chart !== 'undefined') {
                // Chart implementation here
            }
        }, 100);
    }

    render_po_charts() {
        // Implementation for purchase order charts
        setTimeout(() => {
            const ctx = document.getElementById('po-status-chart');
            if (ctx && typeof Chart !== 'undefined') {
                // Chart implementation here
            }
        }, 100);
    }

    // Risk management methods
    view_risk_details(assessment_name) {
        frappe.set_route('Form', 'Risk Assessment', assessment_name);
    }

    create_new_risk_assessment() {
        frappe.new_doc('Risk Assessment');
    }

    // Cleanup method
    destroy() {
        this.destroyAllModules();
        if (this.cache) {
            this.cache.clear();
        }
    }
}

// Initialize the dashboard when page loads
frappe.pages['comprehensive-executive-dashboard'].on_page_load = function(wrapper) {
    frappe.comprehensive_dashboard = new ComprehensiveExecutiveDashboard(wrapper);
};